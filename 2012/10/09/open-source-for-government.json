{"published":true,"title":"Open Source for Government","excerpt":"A collaborative resource for government employees looking to participate in the open source community.","author":"Benjamin J. Balter","layout":"post","comments":true,"category":"Technology","tags":["open source","collaboration","government","gov20","gov 2.0","community building","how to"],"url":"/2012/10/09/open-source-for-government/","date":"2012-10-09 00:00:00 -0400","id":"/2012/10/09/open-source-for-government","categories":["Technology"],"next":"I'm always intrigued by developers who use the term \"open source\" as a verb. As if a switch could magically be thrown, and via a quick mouse click in the [Danger Zone](http://www.youtube.com/watch?v=V8rZWw9HE7o), a proprietary or purpose-built project quickly morphs into one that's \"open source\".\n\nOpen source is not simply about publishing code. That'd be like saying democracy's simply about the ability to vote. Sure, you can vote, but if your vote doesn't matter because the act is solely symbolic, it's not really democracy. It's just a ruse. Like publishing code, voting is necessary but not sufficient.\n\nOpen source, at its core, is actually not about code, but about connecting people around a shared vision. It's about community building. It's about collaboration. It's about getting a bunch of enthusiastic, like-minded folks in a metaphorical room together, and giving them the resources they need to solve a shared problem and create something of benefit to others, something that none of them would have been able to do alone. It's about building and sharing, not about publishing.\n\nPut another way, open source is not an alternative workflow or development method. It's not as if you can choose between waterfall, agile, and open source means of producing software in a workplace. Instead, it's a overriding philosophy that guides a project. Like forward thinking, simple, interoperable, system oriented, or open standards. It's how you approach a problem from the start, not what you do after you've already solved it.\n\nTo say *\"hey, we've got something decent here, let's take this closed-sourced project and just hit publish\"* misses the mark. Your motivation can't be to seek free labor, as in *\"hey, if developers want to give us their time, great, let's put this out there and see what happens we have nothing to lose\"*, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that's exactly how far they'll stay.\n\n**So what makes an open source project truly open source and not simply \"published\"?**\n\n* **Shared Vision** - Open source developers want to get behind a cause. Think of it as analogous to volunteering for a political campaign. They want to know what the project stands for, and where it is going. If they contribute, what will their code be used for in a six months or a year?\n* **Clear Goals** - What's the goal of the project? What's the roadmap look like? Do you trust the community enough to share it? Can they shape that roadmap or is it set in stone?\n* **Active Development** - When's the last public commit? Are you commiting privately, bundling together a release and then blessing the community with your efforts or is development occuring in the open?\n* **Us/Them Mentality** - Is there a class system between paid/unpaid contributors? Are outside contributions handled with equal footing? Are any outside developers delegated authority or given commit access?\n* **Mechanics** - Is it in version control or just a static download? Is the bug tracker public? Can I comment and submit? What about documentation? Is it maintained in a wiki?\n* **Communication** - Can developers communicate directly or must they go through the parent organization? (e.g., announcement verses conversation models)\n* **Purpose-built Code** - Is the code writen for open source? Is it sufficiently documented? Is it modular? Is it specific to the initial usecase or abstracted out to the underlying logic?\n\nAll of the above are underlying principles that drive development from day one, and yet not incompatible with a philosophy that dictates code remains under lock and key until a minimum viable product (MVP) has been reached. They do remain incompatible, however, with a philosophy that says that business as usual can be easily switched mid-stream to a successful open source project by simply not keeping the code secret. \n\nIn the end, it's about [developing a community](http://ben.balter.com/open-source-for-government/#open_source_community_building), not about developing software. You're selling an experience — whether it's scratching a developer's personal itch or giving them the opportunity to change the world. Next time you seek to build something useful, unless it's the recipe for your secret sauce or something so specific as to render it worthless outside the organization's walls, consider [making it open source from the start](http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/), and instead seeking to grow a vibrant community around a cause, rather than simply coding a piece of software that happens to not be secret.","previous":"<p>You may notice things are bit snappier around here these days, having <a href='https://github.com/benbalter/wordpress-to-jekyll-exporter'>recently converted</a> the site from WordPress, to <a href='https://github.com/mojombo/jekyll'>Jekyll</a>.<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p><p>Jekyll is a blog-aware static site generator — heavily integrated with the social code sharing service GitHub — the move to which, was primarily motivated by a desire to embrace the brave new, <a href='http://developmentseed.org/blog/2012/07/27/build-cms-free-websites/'>post-CMS world</a> we now find ourselves in. While WordPress is great, <a href='http://cl.ly/image/1M420a152e1z'>130 outages over the past six months (totalling more than a day&#8217;s worth of downtime)</a>, left a bit to be desired in terms of hosting.</p><p>Although powered by the open-source CMS WordPress, the old site (shared hosting provided by Bluehost) for performance sake, would actually just served flat HTML and Javscript files from disk (generated on a regular basis by an industry-standard plugin known as <a href='http://wordpress.org/extend/plugins/w3-total-cache/'>W3 Total Cache</a>), but fired up WordPress on every request (on top of the already slugish Apache).</p><p>Don&#8217;t get me wrong. WordPress can be <a href='http://wordpress.org/extend/plugins/batcache/'>configured to fly</a> given the right setup, and that&#8217;s exactly what I set out to do. I got the best of the best. I spun up a shiny new AWS box, got Nginx with microcache up and running, APC for opcode, page, and object cache, and even put everything behind Varnish.</p><p>But as much as it pains the developer in me, just like fixies, PBR, and Javascript, static sites are back in style. Reduce the complexity, push it to the edge, and let the visitor&#8217;s browser call APIs directly to generate any dynamic content you may need. Same functionality, same experience, no headache.</p><p>The pitch is straightforward. It leads to simple, flexible, and reliable websites that allow for a renewed focus on what actually matters: the content. Dave Cole over at <a href='http://developmentseed.org/'>Development Seed</a> (also powered by Jekyll) <a href='http://developmentseed.org/blog/2012/07/27/build-cms-free-websites/'>put it best</a>:</p><blockquote>\n<p>In the past, building websites with features like consistent templates and lists of aggregated content meant setting up complex content management systems. These CMSs consisted of templating logic, application code, and content databases so they could assemble webpages each time they were requested by site visitors. They were complicated systems that depend on many separate applications working together, like a web server to route page requests to a PHP application that uses pre-defined page layout templates to format content that’s stored in a MySQL database. Serving a page request required at least three separate applications all working together — any one failing would bring down the system&#8230;</p>\n</blockquote><blockquote>\n<p>From open source frameworks like Drupal, Wordpress, and Expression Engine to multi-million dollar proprietary applications that the government and big corporations procure from companies that also build tanks and battle ships, these systems produce the same exact output: HTML, CSS, and JavaScript files that web browsers know how to format into the webpages we see. Additional features like RSS or JSON API feeds are just new templates for the same content, and backend workflow modules like those for embedded media and handling email notifications are really separate systems that introduce complexity when integrated with the publishing system.</p>\n</blockquote><p>And then there&#8217;s cost. Putting aside the value of time for a moment, shared hosting&#8217;s going to run you in the ballpark of $7 a month; AWS starts at $14, plus the cost of bandwidth and storage; and Jekyll, if hosted by GitHub? Free.<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></p><p>I stood up the three options side-by-side, and ran them through the riggors of a performance testing tool humerously called <a href='http://www.joedog.org/siege-home/'>Siege</a>, the results of which can be found below.</p><p>I&#8217;m still unpacking some of the boxes of bytes, so if you notice something that doesn&#8217;t seem right, feel free to <a href='https://github.com/benbalter/benbalter.github.com/issues'>open an issue</a>, or better yet, like what you see, feel free to <a href='https://github.com/benbalter/benbalter.github.com'>fork and contribute</a>. Embracing somewhat of a crawl, walk, run, or fail-fast philosohpy, next up is <a href='https://github.com/benbalter/benbalter.github.com/blob/js/_plugins/generate-json.rb'>outputting the pages as JSON</a> and relying on Backbone to do the heavy lifting.</p><p>Is it the <a href='http://presidential-innovation-fellows.github.com/mygov/'>first shots</a> <a href='http://presidential-innovation-fellows.github.com/rfpez-blog/'>of a static-site</a> <a href='http://presidential-innovation-fellows.github.com/bluebutton/'>revolution</a>? Time will tell.</p><p>The CMS is dead. Long live the CMS.</p><hr /><h2 id='the_results'>The Results</h2><p><strong>WARNING: Geek Content!</strong></p><h3 id='homepage'>Homepage</h3><p>Command: <code>siege -c 20 -t 30S -b ben.balter.com</code></p><p>The first test was to benchmark the homepage, the most heavily trafficed page on the site. Given 30 seconds of continuous traffic from 20 concurrent users, Bluehost was able to serve a meager 40 users. AWS managed an impressive 2000 users during that same time period (a 50x performance improvement), and did so twice as fast. Enter Jekyll with more than 2600 users (65x increase), responding on average to each in less than a quarter of a second.</p><h4 id='shared_hosting_bluehost'>Shared Hosting (Bluehost)</h4><pre><code>Transactions:\t\t          40 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.54 secs\nData transferred:\t        0.68 MB\nResponse time:\t\t        0.57 secs\nTransaction rate:\t        1.35 trans/sec\nThroughput:\t\t        0.02 MB/sec\nConcurrency:\t\t        0.78\nSuccessful transactions:          40\nFailed transactions:\t           0\nLongest transaction:\t        0.71\nShortest transaction:\t        0.47</code></pre><h4 id='varnish__microcache__page_cache__object_cache_aws'>Varnish + Microcache + Page Cache + Object Cache (AWS)</h4><pre><code>Transactions:\t\t        1954 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.39 secs\nData transferred:\t       13.63 MB\nResponse time:\t\t        0.30 secs\nTransaction rate:\t       66.49 trans/sec\nThroughput:\t\t        0.46 MB/sec\nConcurrency:\t\t       19.80\nSuccessful transactions:        1954\nFailed transactions:\t           0\nLongest transaction:\t        0.92\nShortest transaction:\t        0.06</code></pre><h4 id='github_pages'>Github Pages</h4><pre><code>Transactions:\t\t        2629 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.42 secs\nData transferred:\t        2.71 MB\nResponse time:\t\t        0.22 secs\nTransaction rate:\t       89.36 trans/sec\nThroughput:\t\t        0.09 MB/sec\nConcurrency:\t\t       19.86\nSuccessful transactions:        2629\nFailed transactions:\t           0\nLongest transaction:\t        1.38\nShortest transaction:\t        0.06</code></pre><h3 id='404s'>404s</h3><p>Command: <code>siege -c 20 -t 30S -b ben.balter.com/aaaaaaa/</code></p><p>The true challenge comes in not from serving a static front page (which is presumably cached by WordPress after the first request), but in what happens when it has to reach into the database to retrieve content, for example, when processing a page that doesn&#8217;t exist.<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> Bluehost squeezed out a single response each second, AWS just over 50, and Jekyll didn&#8217;t flinch at 80.</p><h4 id='shared_hosting_bluehost'>Shared Hosting (Bluehost)</h4><pre><code>Transactions:\t\t          30 hits\nAvailability:\t\t       21.43 %\nElapsed time:\t\t       29.58 secs\nData transferred:\t        0.19 MB\nResponse time:\t\t       14.93 secs\nTransaction rate:\t        1.01 trans/sec\nThroughput:\t\t        0.01 MB/sec\nConcurrency:\t\t       15.14\nSuccessful transactions:           0\nFailed transactions:\t         110\nLongest transaction:\t       22.88\nShortest transaction:\t        0.00</code></pre><h4 id='varnish__microcache__page_cache__object_cache_aws'>Varnish + Microcache + Page Cache + Object Cache (AWS)</h4><pre><code>Transactions:\t\t        1567 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.13 secs\nData transferred:\t       14.71 MB\nResponse time:\t\t        0.37 secs\nTransaction rate:\t       53.79 trans/sec\nThroughput:\t\t        0.50 MB/sec\nConcurrency:\t\t       19.83\nSuccessful transactions:           0\nFailed transactions:\t           0\nLongest transaction:\t        1.13\nShortest transaction:\t        0.00</code></pre><h4 id='github_pages'>Github Pages</h4><pre><code>Transactions:\t\t        2373 hits\nAvailability:\t\t      100.00 %\nElapsed time:\t\t       29.82 secs\nData transferred:\t       10.48 MB\nResponse time:\t\t        0.25 secs\nTransaction rate:\t       79.58 trans/sec\nThroughput:\t\t        0.35 MB/sec\nConcurrency:\t\t       19.92\nSuccessful transactions:           0\nFailed transactions:\t           0\nLongest transaction:\t        1.42\nShortest transaction:\t        0.00</code></pre><h3 id='uptime'>Uptime</h3><p>The other concern was uptime. With the AWS route you may get the performance, but with all that complexity, it&#8217;s increasingly more like that something would go wrong, harder to diagnose and resolve, and unlike shared or managed hosting, if your site goes down at 3:00 am, the only person to call is yourself. (no thanks.)</p><p>With Jekyll, because the files are simply sitting on the server, absent a catastrophic failure, when things go wrong with Jekyll, it simply keeps serving the old content.<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup></p><h2 id='conclusion'>Conclusion</h2><p>It&#8217;s cheaper, it&#8217;s faster, it&#8217;s simpler, it&#8217;s worry free, and in my opinion, it&#8217;s the future. Welcome to the post-CMS world.</p><div class='footnotes'><hr /><ol><li id='fn:1'>\n<p>Not to be confused with <a href='http://www.youtube.com/watch?v=Q7H_L5cYkg8'>The Jackal</a>.</p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>\n<p>That&#8217;s free as in speech <strong>and</strong> free as in beer.</p>\n<a href='#fnref:2' rev='footnote'>&#8617;</a></li><li id='fn:3'>\n<p>Requesting a page that doesn&#8217;t exist will require WordPress to run multiple database queries to attempt to find the page, a request that would most likely not be cached in the event that the 404 was sent in error.</p>\n<a href='#fnref:3' rev='footnote'>&#8617;</a></li><li id='fn:4'>\n<p>GitHub&#8217;s build queue has been backing up every once in a while as of late, but if a change isn&#8217;t instantanous, I&#8217;m okay with that.</p>\n<a href='#fnref:4' rev='footnote'>&#8617;</a></li></ol></div>","content":"<p>I encourage you to read through <a href='http://ben.balter.com/open-source-for-government/'>Open Source for Government</a>, a collaborative resource for government employees looking to participate in the open source community.</p><p>Also please feel free to <a href='https://github.com/benbalter/open-source-for-government'>fork and contribute</a> (no technical knowledge necessary).</p>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2012/07/26/government-release-of-source-code-public-domain-or-open-source/","title":"Government's Release of Federally Funded Source Code: Public Domain or Open Source? Yes."},{"url":"/2012/04/15/cfpb-accepts-first-citizen-submitted-pull-request-on-behalf-of-federal-government/","title":"CFPB Accepts First Citizen-Submitted Code on Behalf of Federal Government\n"},{"url":"/2012/12/16/deprecate-management/","title":"Deprecate Management"},{"url":"/2012/10/15/open-source-is-not-a-verb/","title":"Open Source is not a verb"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/","title":"WP Document Revisions — Document Management & Version Control for WordPress"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"}]}