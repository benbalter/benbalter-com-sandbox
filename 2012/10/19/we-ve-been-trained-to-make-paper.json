{"title":"We've been trained to make paper","excerpt":"If the internet is the primary medium by which content is consumed, shouldn't that be the primary medium for which content is prepared?","author":"Benjamin J. Balter","layout":"post","comments":true,"category":"Technology","tags":["collaboration","Word","workflow","git","GitHub","markdown"],"published":true,"url":"/2012/10/19/we-ve-been-trained-to-make-paper/","date":"2012-10-19 00:00:00 -0400","id":"/2012/10/19/we-ve-been-trained-to-make-paper","categories":["Technology"],"next":"The internet has a particular way of solving difficult technical challenges. We try a bunch of diverse approaches out, keep only the most elegant, and quickly forget the rest ever happened. That's why the Web is the Internet's preeminent service (as apposed to say [Gopher](http://en.wikipedia.org/wiki/Gopher_%28protocol%29)), clicking the logo in the top left corner of almost any site goes to that site's homepage, and typing a URL in your browser retrieves that particular page. These aren't just design conventions in the sense that a lot of people like them, but rather represent the purposeful result of trial and error.\n\nOver the past few years, as sites become more mature and even more inter-connected, the internet has been coalescing around one such pattern (known as [REST](http://en.wikipedia.org/wiki/Representational_state_transfer)). The idea is simple: a URL should uniquely identify the underlying data it represents. If I have a URL, I shouldn't need anything else to view or otherwise manipulate the information behind it.\n\nWordPress, for the most part, does this well. Each post is given a unique permalink (e.g., `2012-12-15-why-wordpress...`) that always points to that post. The problem is, however, in WordPress's sense, it points to the *display* of that content, not the content itself. When editing, for example, that same content may be represented as `/wp-admin/post.php?p=1234`, clearly a different URL, and if you'd like to programmatically access the underlying data (say to build a mobile app, or some sort of external widget), you're pretty much SOL in terms of WordPress's core vision.\n\nWhy does such a nuance matter? Take a look at the direction the net's heading. We're separating content (say, the post itself), from the presentation layer that holds it hostage (say the theme's template), so that we can use it in many, many different ways without starting from scratch. This goes on behind the scenes in many ways you may not even notice, and that's the point. By enabling programatic access of the underlying data, that same post can be read via a mobile app, a feed reader, posted to a social network, or even embedded within another site altogether. \n\nWebsites are quickly becoming the curators of information, not simply the presenters of it. It's a return to content management in its purest form. It's exposing content as a service, and it's coming whether we want it or not.\n\nWordPress came about as many of these now-standard design conventions were still emerging, and understandably, it doesn't exactly embrace them head on. Yet next generation content management systems — not weighed down by history — have an advantage here, and as folks look to build the next generation of websites, they're obviously going to be looking to where we're going, not where we've been. \n\nIf WordPress wants to stay relevant as a content management platform, the future isn't traditional post-and-forget blogging, but rather a concerted effort to once again make content king. We obviously can't flip a switch and get there overnight, but a crawl, walk, run over the next version or so can better align the veritable CMS with the reality of what's in our collective pipeline:\n\n### Crawl\n\nAt the very least, lets expose all WordPress content in a machine readable format. This once and for all breaks the content-presentation link. We do this with RSS somewhat, but it's time to put non-HTML formats on equal footing with HTML in core's eyes.\n\n1. Create a new format (\"feed\" in WordPress parlance) called JSON, and add the necessary rewrite rules such that I can simply add `.json` to any post and retrieve the underlying information in a machine readable format. This should contain not only the content of the post and information that would normally be accessible via HTML, but all the fields of the posts table (e.g., date published, date updated, etc.), all the post's metadata (custom, post-specific information), and all the associated term objects (tags, categories, etc.). Sure we'll need to add a filter or two in their to ensure information folks want private stays private, but from a technical standpoint, we're talking a handful of lines of code here.\n\n2. Extend that format to indexes (archives in WordPress terms). Again, just as above, every list of posts (by date, by associated term, search results) should have the capability to exose the list in that same machine-readable format. This allows for the programatic discovery of information. A little bit harder than #1, but again, nothing crazy here. Pretty basic stuff.\n\n### Walk\n\nAccess to content is half the equation. Allow programatic management of WordPress content as well. Conceptually, this is nothing radical. WordPress allows remote management of content through the [XML-RPC](http://en.wikipedia.org/wiki/XML-RPC) protocol, a blog-specific format that was designed some 15 years ago. We're just talking about an upgrade.\n\n1. Use the existing `admin-ajax` infrastructure to consistently expose administrative functions in a programtic ways. For example, POSTing to `admin-ajax.php?action=create` should allow me to create a new post, just as `admin-ajax.php?action=update&p=123` or `?action=delete&p=1234` should do the same. Again, the basic plumbing's already there, it's just a matter of abstracting it out and aligning with modern conventions.\n\n2. Pick a few high-priority pieces of backend functionality to prototype, such as listing posts or editing an existing post, and rather than reloading the entire administrative interface every time I click something, dogfood the services exposed in #1 to update the content dynamically. Put another way, turn the WordPress backend into a full-fledged client-side content administration application, rather than merely part of a blog. Again, nothign radical here. Gmail does this with mail, Twitter does this with Tweets. It's time for WordPress to start doing this with posts.\n\n### Run\n\nWe may not get there tomorrow, but I know that with a bit of nuance, WordPress can align itself as the platform of the future and tackle the next generation of web-based applications in the \"WordPress way\". It's simply a matter of positioning.\n\n1. Transparently map the already-exposed permalink endpoints (e.g., `2012/12/15/post.json`) to their backend counterparts. This may require a bit of rewriting of the WordPress routings system (to understand [HTTP verbs](http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) other than simply GET). At this point, WordPress would expose a fully RESTful API for any content it knows about, but could do so with the traditional WordPress finess.\n\n2. Add [Backbone](http://backbonejs.org/) to the default theme (it's already used on the backend), and begin to dogfood content on the front end as well as the backend so that clicking a post or page simply retrieves the content, rather than reloading the entire website. There's an opportunity to really rethink templating here. Perhaps `wp_get_ajax_template` or something converts a WordPress template to an underscore template. Perhaps WordPress compiles everything into JST for me.\n\nAs community members sit down to sketch out what the next version of WordPress looks like, I sincerely hope they can at least think about implementing some of the front-end functionality early on, and maybe even make a prototypical wp-admin 2.0 somewhat of a priority.\n\nTechnology has this tricky way of bringing about organizational change. Making something so dumb-simple really is an empowering force. WordPress did it once as it first set out to democratize publishing, and it's time to do it again for the next generation of non-blogging websites and applications.\n\n**Update (12/20):** *Not quite REST, but as [@scribu](https://twitter.com/scribu) points out in the comments below, [#14618](https://core.trac.wordpress.org/ticket/14618) proposed an RPC-like JSON API some two years ago. Looks like the ticket ended up in somewhat over a holy war over standards (XML v. JSON anyone?), but the arguments in favor still stand nonetheless.*","previous":"<p>I&#8217;m always intrigued by developers who use the term &#8220;open source&#8221; as a verb. As if a switch could magically be thrown, and via a quick mouse click in the <a href='http://www.youtube.com/watch?v=V8rZWw9HE7o'>Danger Zone</a>, a proprietary or purpose-built project quickly morphs into one that&#8217;s &#8220;open source&#8221;.</p><p>Open source is not simply about publishing code. That&#8217;d be like saying democracy&#8217;s simply about the ability to vote. Sure, you can vote, but if your vote doesn&#8217;t matter because the act is solely symbolic, it&#8217;s not really democracy. It&#8217;s just a ruse. Like publishing code, voting is necessary but not sufficient.</p><p>Open source, at its core, is actually not about code, but about connecting people around a shared vision. It&#8217;s about community building. It&#8217;s about collaboration. It&#8217;s about getting a bunch of enthusiastic, like-minded folks in a metaphorical room together, and giving them the resources they need to solve a shared problem and create something of benefit to others, something that none of them would have been able to do alone. It&#8217;s about building and sharing, not about publishing.</p><p>Put another way, open source is not an alternative workflow or development method. It&#8217;s not as if you can choose between waterfall, agile, and open source means of producing software in a workplace. Instead, it&#8217;s a overriding philosophy that guides a project. Like forward thinking, simple, interoperable, system oriented, or open standards. It&#8217;s how you approach a problem from the start, not what you do after you&#8217;ve already solved it.</p><p>To say <em>&#8220;hey, we&#8217;ve got something decent here, let&#8217;s take this closed-sourced project and just hit publish&#8221;</em> misses the mark. Your motivation can&#8217;t be to seek free labor, as in <em>&#8220;hey, if developers want to give us their time, great, let&#8217;s put this out there and see what happens we have nothing to lose&#8221;</em>, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that&#8217;s exactly how far they&#8217;ll stay.</p><p><strong>So what makes an open source project truly open source and not simply &#8220;published&#8221;?</strong></p><ul>\n<li><strong>Shared Vision</strong> - Open source developers want to get behind a cause. Think of it as analogous to volunteering for a political campaign. They want to know what the project stands for, and where it is going. If they contribute, what will their code be used for in a six months or a year?</li>\n\n<li><strong>Clear Goals</strong> - What&#8217;s the goal of the project? What&#8217;s the roadmap look like? Do you trust the community enough to share it? Can they shape that roadmap or is it set in stone?</li>\n\n<li><strong>Active Development</strong> - When&#8217;s the last public commit? Are you commiting privately, bundling together a release and then blessing the community with your efforts or is development occuring in the open?</li>\n\n<li><strong>Us/Them Mentality</strong> - Is there a class system between paid/unpaid contributors? Are outside contributions handled with equal footing? Are any outside developers delegated authority or given commit access?</li>\n\n<li><strong>Mechanics</strong> - Is it in version control or just a static download? Is the bug tracker public? Can I comment and submit? What about documentation? Is it maintained in a wiki?</li>\n\n<li><strong>Communication</strong> - Can developers communicate directly or must they go through the parent organization? (e.g., announcement verses conversation models)</li>\n\n<li><strong>Purpose-built Code</strong> - Is the code writen for open source? Is it sufficiently documented? Is it modular? Is it specific to the initial usecase or abstracted out to the underlying logic?</li>\n</ul><p>All of the above are underlying principles that drive development from day one, and yet not incompatible with a philosophy that dictates code remains under lock and key until a minimum viable product (MVP) has been reached. They do remain incompatible, however, with a philosophy that says that business as usual can be easily switched mid-stream to a successful open source project by simply not keeping the code secret.</p><p>In the end, it&#8217;s about <a href='http://ben.balter.com/open-source-for-government/#open_source_community_building'>developing a community</a>, not about developing software. You&#8217;re selling an experience — whether it&#8217;s scratching a developer&#8217;s personal itch or giving them the opportunity to change the world. Next time you seek to build something useful, unless it&#8217;s the recipe for your secret sauce or something so specific as to render it worthless outside the organization&#8217;s walls, consider <a href='http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/'>making it open source from the start</a>, and instead seeking to grow a vibrant community around a cause, rather than simply coding a piece of software that happens to not be secret.</p>","content":"<p>We&#8217;ve been trained wrong. We&#8217;ve been trained that content creation starts by firing up a desktop word processor — a piece of software, mind you, that still does its best to generate a digital representation of a physical piece of paper — margins, page breaks, and all. Yet this quintessential workplace-place training simply fails to remain relevant in a world where we carry a computer in our pockets at all times. Our training now tells us to create content for the least-likely way it&#8217;s consumed: on paper. We&#8217;re stuck in an anachronistic workflow.</p><p>It&#8217;s not uncommon for example, for a team to need to write or edit a document together. Take the typical collaborative publishing process, which generally goes something like this:</p><ol>\n<li>Draft content in Microsoft Word</li>\n\n<li>Save to shared folder or e-mail around for comments and changes</li>\n\n<li>Manually (and opaquely) reconsile changes one-by-one</li>\n\n<li>Repeat steps 2-3 until satisfied with the document</li>\n\n<li><strong>Convert to web-friendly format</strong></li>\n\n<li>Publish</li>\n</ol><p>See what we did there? We&#8217;re still writing content for print, and then only once we&#8217;re completely done, begin to prepare it for web. That&#8217;s broken. That&#8217;s like building an entire car, and then at the last minute, deciding it should actually, in fact, be a plane. If the internet is the primary medium by which content is consumed, shouldn&#8217;t that be the primary medium for which content is written?</p><h3 id='using_the_wrong_tools'>Using the wrong tools</h3><p>Microsoft Word was designed with one purpose in mind: to make paper. Think about it. It&#8217;s essential elements arose in the early 80&#8217;s. There&#8217;s print-centric buttons like left and right align front and center, but new-fangled internety things like hyperlinks or rich media are buried deep inside these labyrinthian sub-menus. Sure, it&#8217;s industry standard, but it&#8217;s an industry-standard workflow that arose before the age of the web (and hasn&#8217;t really changed since).</p><p>Yet the majority of the documents we create today rarely, if ever embody physical space. They don&#8217;t care about the things Microsoft Word cares about — margin width, page breaks, or other properties that assume four sharp corners — and more importantly, they don&#8217;t handle mobile responsiveness, machine-readability, or other web-specific features.</p><h3 id='merely_a_snapshot'>Merely a snapshot</h3><p>And then there&#8217;s the problem of collaborating. I can&#8217;t count the number of times I&#8217;ve been e-mailed a document entitled <code>foo-document_2012_10_15_clean_fixed_revised_final2</code> or told that it&#8217;s &#8220;on the share drive&#8221; or asked &#8220;are you out yet?&#8221;. Without expensive software, that document&#8217;s just a snapshot in time. There&#8217;s no context. <em>What updates does this version have that weren&#8217;t in the last? Wait is this even the most recent version? Who made the last three revisions? What happened with that change I submitted - did you accept it? Why not? Can we discuss? Can two people edit it at the same time? Not to mention — I have a crazy idea — can I go off and experiment in a parallel version?</em></p><p>Geeks solved this problem a long time ago. It&#8217;s called version control. We built it in the 70&#8217;s. We start with content, you edit it, I edit it, and we get better content. It&#8217;s really that simple, and better yet, it&#8217;s free. It handles curating the master copy, keeps track of each and every change (down to the character mind you), and even provides a transparent forum to discuss those changes in the context in which they occur. <a href='https://github.com/benbalter/benbalter.github.com/commits/master/posts/_posts/2012-10-19-we-ve-been-trained-to-make-paper.md'>Take a look for yourself</a>.</p><h3 id='jailbreaking_content'>Jailbreaking content</h3><p>So why doesn&#8217;t everyone use this &#8220;version control&#8221;? Because we&#8217;re trained wrong. We&#8217;ve got to break free of these proprietary, print-only formats. We&#8217;ve got to stop shuttling changes back-and-forth via e-mail or with obscure file names. We&#8217;ve got to unprogram ourselves for an age of print.</p><p>And here&#8217;s why: <em>.doc files are like tiny micro-jails for our content.</em> Proprietary document formats tend to commingle the text we provide with the commands the software needs to recreate it, and it stores all this in a complicated and inaccessible binary format. That&#8217;s what makes it proprietary. We put text in — one of the most basic things computers understand — and we get this big mess back that can only be opened by that software. Imagine if the most common way to get water was to buy a can of Coke and run in through a Brita filter. It doesn&#8217;t need to be so complicated.</p><h3 id='break_the_habit'>Break the habit</h3><p>Let&#8217;s just concentrate on what matters: the content. When you separate design from content, things get a lot cleaner and a lot easier to work with. From now on, instead of clicking the little blue &#8220;W&#8221; out of habit, ask &#8220;does this really need to be a piece of paper?&#8221; If not, all of a sudden you can now use the best collaboration tools that mankind has made to date, rather than publishing tools that were made for a bygone generation.</p><p>And it&#8217;s not that hard. You can just click &#8220;edit&#8221; below (as an example), or the next project that comes across your plate, give git a try:</p><ol>\n<li><a href='https://gist.github.com/3914310'>Learn</a> Markdown - it takes 30 seconds. Honestly.</li>\n\n<li><a href='https://github.com/signup/free'>Signup</a> for a GitHub account - it&#8217;s free!</li>\n\n<li>Install <a href='http://mac.github.com/'>GitHub for Mac</a> (or <a href='http://windows.github.com/'>GitHub for Windows</a>) and <a href='http://mouapp.com/'>Mou</a></li>\n\n<li>Create a repository and go to work</li>\n</ol><p>Granted some of the tools can be a bit rough around the edges at times, they are getting better, and like lots of other open-source technologies before it, as we move from paper-first to a web-only distribution, the time is ripe for a more evolved, text-centric, distributed workflow to become mainstream. <em>Stop making paper, start collaborating.</em></p>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"},{"url":"/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/","title":"WP Document Revisions — Document Management & Version Control for WordPress"},{"url":"/2012/02/28/github-for-journalism-what-wordpress-post-forking-could-do-to-editorial-workflows/","title":"GitHub for Journalism — What WordPress Post Forking could do to Editorial Workflows\n"},{"url":"/2012/10/01/welcome-to-the-post-cms-world/","title":"Welcome to the Post-CMS World"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2012/12/16/deprecate-management/","title":"Deprecate Management"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"}]}