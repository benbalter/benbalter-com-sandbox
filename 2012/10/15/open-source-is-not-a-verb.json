{"published":true,"title":"Open Source is not a verb","excerpt":"Open source, at its core, is actually not about code, but about connecting people around a shared vision to encourage collaborative problem solving.","author":"Benjamin J. Balter","layout":"post","comments":true,"category":"Technology","tags":["open source","collaboration","proprietary","community building"],"related_posts":[{"url":"/2010/09/12/wordpress-resume-plugin/","id":"/2010/09/12/wordpress-resume-plugin","title":"WordPress Resume Plugin"},{"url":"/2010/09/13/new-media-flak-megaphone-vs-cocktail-party/","id":"/2010/09/13/new-media-flak-megaphone-vs-cocktail-party","title":"New Media Flak: Megaphone vs. Cocktail Party"},{"url":"/2010/10/10/does-every-cloud-have-a-silver-lining/","id":"/2010/10/10/does-every-cloud-have-a-silver-lining","title":"Does Every Cloud Have a Silver Lining?"},{"url":"/2010/11/06/removing-the-barriers-to-organizational-agility/","id":"/2010/11/06/removing-the-barriers-to-organizational-agility","title":"Removing the Barriers to Organizational Agility\n"},{"url":"/2010/11/08/what-fourteen-century-apple-pie-teaches-us-about-sharing/","id":"/2010/11/08/what-fourteen-century-apple-pie-teaches-us-about-sharing","title":"What Fourteen-Century Apple Pie Teaches Us About Sharing\n"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","id":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2010/11/29/free-trade-in-china-just-google-it/","id":"/2010/11/29/free-trade-in-china-just-google-it","title":"Free Trade in China? Just Google it."},{"url":"/2010/11/29/twitter-mentions-as-comments/","id":"/2010/11/29/twitter-mentions-as-comments","title":"Twitter Mentions as Comments WordPress Plugin\n"},{"url":"/2010/12/01/the-internet-is-series-of-tubes/","id":"/2010/12/01/the-internet-is-series-of-tubes","title":"The Internet is Series of Tubes (oh, and Tollgates too)\n"},{"url":"/2010/12/20/late-night-infomercials/","id":"/2010/12/20/late-night-infomercials","title":"Late-Night Infomercials: Guaranteed to Extend the 4th Amendment or Your Money Back"}],"url":"/2012/10/15/open-source-is-not-a-verb/","date":"2012-10-15 00:00:00 +0000","id":"/2012/10/15/open-source-is-not-a-verb","categories":["Technology"],"next":"/2012/10/19/we-ve-been-trained-to-make-paper","previous":"/2012/10/09/open-source-for-government","content":"<p>I&#8217;m always intrigued by developers who use the term &#8220;open source&#8221; as a verb. As if a switch could magically be thrown, and via a quick mouse click in the <a href='http://www.youtube.com/watch?v=V8rZWw9HE7o'>Danger Zone</a>, a proprietary or purpose-built project quickly morphs into one that&#8217;s &#8220;open source&#8221;.</p>\n\n<p>Open source is not simply about publishing code. That&#8217;d be like saying democracy&#8217;s simply about the ability to vote. Sure, you can vote, but if your vote doesn&#8217;t matter because the act is solely symbolic, it&#8217;s not really democracy. It&#8217;s just a ruse. Like publishing code, voting is necessary but not sufficient.</p>\n\n<p>Open source, at its core, is actually not about code, but about connecting people around a shared vision. It&#8217;s about community building. It&#8217;s about collaboration. It&#8217;s about getting a bunch of enthusiastic, like-minded folks in a metaphorical room together, and giving them the resources they need to solve a shared problem and create something of benefit to others, something that none of them would have been able to do alone. It&#8217;s about building and sharing, not about publishing.</p>\n\n<p>Put another way, open source is not an alternative workflow or development method. It&#8217;s not as if you can choose between waterfall, agile, and open source means of producing software in a workplace. Instead, it&#8217;s a overriding philosophy that guides a project. Like forward thinking, simple, interoperable, system oriented, or open standards. It&#8217;s how you approach a problem from the start, not what you do after you&#8217;ve already solved it.</p>\n\n<p>To say <em>&#8220;hey, we&#8217;ve got something decent here, let&#8217;s take this closed-sourced project and just hit publish&#8221;</em> misses the mark. Your motivation can&#8217;t be to seek free labor, as in <em>&#8220;hey, if developers want to give us their time, great, let&#8217;s put this out there and see what happens we have nothing to lose&#8221;</em>, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that&#8217;s exactly how far they&#8217;ll stay.</p>\n\n<p><strong>So what makes an open source project truly open source and not simply &#8220;published&#8221;?</strong></p>\n\n<ul>\n<li><strong>Shared Vision</strong> - Open source developers want to get behind a cause. Think of it as analogous to volunteering for a political campaign. They want to know what the project stands for, and where it is going. If they contribute, what will their code be used for in a six months or a year?</li>\n\n<li><strong>Clear Goals</strong> - What&#8217;s the goal of the project? What&#8217;s the roadmap look like? Do you trust the community enough to share it? Can they shape that roadmap or is it set in stone?</li>\n\n<li><strong>Active Development</strong> - When&#8217;s the last public commit? Are you commiting privately, bundling together a release and then blessing the community with your efforts or is development occuring in the open?</li>\n\n<li><strong>Us/Them Mentality</strong> - Is there a class system between paid/unpaid contributors? Are outside contributions handled with equal footing? Are any outside developers delegated authority or given commit access?</li>\n\n<li><strong>Mechanics</strong> - Is it in version control or just a static download? Is the bug tracker public? Can I comment and submit? What about documentation? Is it maintained in a wiki?</li>\n\n<li><strong>Communication</strong> - Can developers communicate directly or must they go through the parent organization? (e.g., announcement verses conversation models)</li>\n\n<li><strong>Purpose-built Code</strong> - Is the code writen for open source? Is it sufficiently documented? Is it modular? Is it specific to the initial usecase or abstracted out to the underlying logic?</li>\n</ul>\n\n<p>All of the above are underlying principles that drive development from day one, and yet not incompatible with a philosophy that dictates code remains under lock and key until a minimum viable product (MVP) has been reached. They do remain incompatible, however, with a philosophy that says that business as usual can be easily switched mid-stream to a successful open source project by simply not keeping the code secret.</p>\n\n<p>In the end, it&#8217;s about <a href='http://ben.balter.com/open-source-for-government/#open_source_community_building'>developing a community</a>, not about developing software. You&#8217;re selling an experience â€” whether it&#8217;s scratching a developer&#8217;s personal itch or giving them the opportunity to change the world. Next time you seek to build something useful, unless it&#8217;s the recipe for your secret sauce or something so specific as to render it worthless outside the organization&#8217;s walls, consider <a href='http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/'>making it open source from the start</a>, and instead seeking to grow a vibrant community around a cause, rather than simply coding a piece of software that happens to not be secret.</p>"}