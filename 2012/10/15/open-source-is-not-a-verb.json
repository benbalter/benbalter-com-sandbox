{"published":true,"title":"Open Source is not a verb","excerpt":"Open source, at its core, is actually not about code, but about connecting people around a shared vision to encourage collaborative problem solving.","author":"Benjamin J. Balter","layout":"post","comments":true,"category":"Technology","tags":["open source","collaboration","proprietary","community building"],"url":"/2012/10/15/open-source-is-not-a-verb/","date":"2012-10-15 00:00:00 -0400","id":"/2012/10/15/open-source-is-not-a-verb","categories":["Technology"],"next":"We've been trained wrong. We've been trained that content creation starts by firing up a desktop word processor — a piece of software, mind you, that still does its best to generate a digital representation of a physical piece of paper — margins, page breaks, and all. Yet this quintessential workplace-place training simply fails to remain relevant in a world where we carry a computer in our pockets at all times. Our training now tells us to create content for the least-likely way it's consumed: on paper. We're stuck in an anachronistic workflow.\n\nIt's not uncommon for example, for a team to need to write or edit a document together. Take the typical collaborative publishing process, which generally goes something like this:\n\n1. Draft content in Microsoft Word\n2. Save to shared folder or e-mail around for comments and changes\n3. Manually (and opaquely) reconsile changes one-by-one\n4. Repeat steps 2-3 until satisfied with the document\n5. **Convert to web-friendly format**\n6. Publish\n\nSee what we did there? We're still writing content for print, and then only once we're completely done, begin to prepare it for web. That's broken. That's like building an entire car, and then at the last minute, deciding it should actually, in fact, be a plane. If the internet is the primary medium by which content is consumed, shouldn't that be the primary medium for which content is written?\n\n### Using the wrong tools\n\nMicrosoft Word was designed with one purpose in mind: to make paper. Think about it. It's essential elements arose in the early 80's. There's print-centric buttons like left and right align front and center, but new-fangled internety things like hyperlinks or rich media are buried deep inside these labyrinthian sub-menus. Sure, it's industry standard, but it's an industry-standard workflow that arose before the age of the web (and hasn't really changed since).\n\nYet the majority of the documents we create today rarely, if ever embody physical space.  They don't care about the things Microsoft Word cares about — margin width, page breaks, or other properties that assume four sharp corners — and more importantly, they don't handle mobile responsiveness, machine-readability, or other web-specific features.\n\n### Merely a snapshot\n\nAnd then there's the problem of collaborating. I can't count the number of times I've been e-mailed a document entitled `foo-document_2012_10_15_clean_fixed_revised_final2` or told that it's \"on the share drive\" or asked \"are you out yet?\". Without expensive software, that document's just a snapshot in time. There's no context. *What updates does this version have that weren't in the last? Wait is this even the most recent version? Who made the last three revisions? What happened with that change I submitted - did you accept it? Why not? Can we discuss? Can two people edit it at the same time? Not to mention — I have a crazy idea — can I go off and experiment in a parallel version?*\n\nGeeks solved this problem a long time ago. It's called version control. We built it in the 70's. We start with content, you edit it, I edit it, and we get better content. It's really that simple, and better yet, it's free. It handles curating the master copy, keeps track of each and every change (down to the character mind you), and even provides a transparent forum to discuss those changes in the context in which they occur. [Take a look for yourself](https://github.com/benbalter/benbalter.github.com/commits/master/posts/_posts/2012-10-19-we-ve-been-trained-to-make-paper.md).\n\n### Jailbreaking content\n\nSo why doesn't everyone use this \"version control\"? Because we're trained wrong. We've got to break free of these proprietary, print-only formats. We've got to stop shuttling changes back-and-forth via e-mail or with obscure file names. We've got to unprogram ourselves for an age of print.\n\nAnd here's why: *.doc files are like tiny micro-jails for our content.* Proprietary document formats tend to commingle the text we provide with the commands the software needs to recreate it, and it stores all this in a complicated and inaccessible binary format. That's what makes it proprietary. We put text in — one of the most basic things computers understand — and we get this big mess back that can only be opened by that software. Imagine if the most common way to get water was to buy a can of Coke and run in through a Brita filter. It doesn't need to be so complicated. \n\n### Break the habit\n\nLet's just concentrate on what matters: the content. When you separate design from content, things get a lot cleaner and a lot easier to work with. From now on, instead of clicking the little blue \"W\" out of habit, ask \"does this really need to be a piece of paper?\" If not, all of a sudden you can now use the best collaboration tools that mankind has made to date, rather than publishing tools that were made for a bygone generation.\n\nAnd it's not that hard. You can just click \"edit\" below (as an example), or the next project that comes across your plate, give git a try:\n\n1. [Learn](https://gist.github.com/3914310) Markdown - it takes 30 seconds. Honestly.\n2. [Signup](https://github.com/signup/free) for a GitHub account - it's free!\n3. Install [GitHub for Mac](http://mac.github.com/) (or [GitHub for Windows](http://windows.github.com/)) and [Mou](http://mouapp.com/)\n4. Create a repository and go to work\n\nGranted some of the tools can be a bit rough around the edges at times, they are getting  better, and like lots of other open-source technologies before it, as we move from  paper-first to a web-only distribution, the time is ripe for a more evolved, text-centric, distributed workflow to become mainstream. *Stop making paper, start collaborating.*","previous":"<p>I encourage you to read through <a href='http://ben.balter.com/open-source-for-government/'>Open Source for Government</a>, a collaborative resource for government employees looking to participate in the open source community.</p><p>Also please feel free to <a href='https://github.com/benbalter/open-source-for-government'>fork and contribute</a> (no technical knowledge necessary).</p>","content":"<p>I&#8217;m always intrigued by developers who use the term &#8220;open source&#8221; as a verb. As if a switch could magically be thrown, and via a quick mouse click in the <a href='http://www.youtube.com/watch?v=V8rZWw9HE7o'>Danger Zone</a>, a proprietary or purpose-built project quickly morphs into one that&#8217;s &#8220;open source&#8221;.</p><p>Open source is not simply about publishing code. That&#8217;d be like saying democracy&#8217;s simply about the ability to vote. Sure, you can vote, but if your vote doesn&#8217;t matter because the act is solely symbolic, it&#8217;s not really democracy. It&#8217;s just a ruse. Like publishing code, voting is necessary but not sufficient.</p><p>Open source, at its core, is actually not about code, but about connecting people around a shared vision. It&#8217;s about community building. It&#8217;s about collaboration. It&#8217;s about getting a bunch of enthusiastic, like-minded folks in a metaphorical room together, and giving them the resources they need to solve a shared problem and create something of benefit to others, something that none of them would have been able to do alone. It&#8217;s about building and sharing, not about publishing.</p><p>Put another way, open source is not an alternative workflow or development method. It&#8217;s not as if you can choose between waterfall, agile, and open source means of producing software in a workplace. Instead, it&#8217;s a overriding philosophy that guides a project. Like forward thinking, simple, interoperable, system oriented, or open standards. It&#8217;s how you approach a problem from the start, not what you do after you&#8217;ve already solved it.</p><p>To say <em>&#8220;hey, we&#8217;ve got something decent here, let&#8217;s take this closed-sourced project and just hit publish&#8221;</em> misses the mark. Your motivation can&#8217;t be to seek free labor, as in <em>&#8220;hey, if developers want to give us their time, great, let&#8217;s put this out there and see what happens we have nothing to lose&#8221;</em>, or about sporadically seeking to garner good will from a niche community of dedicated fans. Trust me, an open source developer can smell astroturf a mile a way, and that&#8217;s exactly how far they&#8217;ll stay.</p><p><strong>So what makes an open source project truly open source and not simply &#8220;published&#8221;?</strong></p><ul>\n<li><strong>Shared Vision</strong> - Open source developers want to get behind a cause. Think of it as analogous to volunteering for a political campaign. They want to know what the project stands for, and where it is going. If they contribute, what will their code be used for in a six months or a year?</li>\n\n<li><strong>Clear Goals</strong> - What&#8217;s the goal of the project? What&#8217;s the roadmap look like? Do you trust the community enough to share it? Can they shape that roadmap or is it set in stone?</li>\n\n<li><strong>Active Development</strong> - When&#8217;s the last public commit? Are you commiting privately, bundling together a release and then blessing the community with your efforts or is development occuring in the open?</li>\n\n<li><strong>Us/Them Mentality</strong> - Is there a class system between paid/unpaid contributors? Are outside contributions handled with equal footing? Are any outside developers delegated authority or given commit access?</li>\n\n<li><strong>Mechanics</strong> - Is it in version control or just a static download? Is the bug tracker public? Can I comment and submit? What about documentation? Is it maintained in a wiki?</li>\n\n<li><strong>Communication</strong> - Can developers communicate directly or must they go through the parent organization? (e.g., announcement verses conversation models)</li>\n\n<li><strong>Purpose-built Code</strong> - Is the code writen for open source? Is it sufficiently documented? Is it modular? Is it specific to the initial usecase or abstracted out to the underlying logic?</li>\n</ul><p>All of the above are underlying principles that drive development from day one, and yet not incompatible with a philosophy that dictates code remains under lock and key until a minimum viable product (MVP) has been reached. They do remain incompatible, however, with a philosophy that says that business as usual can be easily switched mid-stream to a successful open source project by simply not keeping the code secret.</p><p>In the end, it&#8217;s about <a href='http://ben.balter.com/open-source-for-government/#open_source_community_building'>developing a community</a>, not about developing software. You&#8217;re selling an experience — whether it&#8217;s scratching a developer&#8217;s personal itch or giving them the opportunity to change the world. Next time you seek to build something useful, unless it&#8217;s the recipe for your secret sauce or something so specific as to render it worthless outside the organization&#8217;s walls, consider <a href='http://ben.balter.com/2012/06/26/why-you-should-always-write-software-as-open-source/'>making it open source from the start</a>, and instead seeking to grow a vibrant community around a cause, rather than simply coding a piece of software that happens to not be secret.</p>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2012/06/26/why-you-should-always-write-software-as-open-source/","title":"Why You Should Always Write Software as Open Source, Even When It's Never Going to Be"},{"url":"/2012/07/26/government-release-of-source-code-public-domain-or-open-source/","title":"Government's Release of Federally Funded Source Code: Public Domain or Open Source? Yes."},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2012/06/02/publishing-government-data-that-developers-will-actually-use/","title":"Publishing Government Data That Developers Will Actually Use\n"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"}]}