{"author":"Benjamin J. Balter","title":"WordPress for Government - A Problem of Perception","excerpt":"Among potential government & enterprise users, WordPress has a perception problem especially when compared to Drupal & other \"serious\" CMSs.","layout":"post","categories":["Technology"],"tags":[".govs","contracting","drupal","enterprise","federal","gov 2.0","government","IT","open government","open source","procurement","sharepoint","wordpress"],"url":"/2012/03/05/wordpress-for-government-and-enterprise/","date":"2012-03-05 00:00:00 -0500","id":"/2012/03/05/wordpress-for-government-and-enterprise","next":"![CFPB Logo][1]{.alignright}\n\nMost often, when we talk about open source in government, it's talked about in one of two ways: either it's [the pitfalls of the federal IT procurement model][2] that can't seem to comprehend a world in which open-source is an option, much less potentially a superior choice ([\"acquisition as a roadblock][3]\"), or it's reiterating the same open-source talking points that haven't seemed to give open source much parity with the wall of organizational inertia proprietary software seems to have gained over the years (\"[open source as an alternative][4]\").\n\nThe [Consumer Financial Protection Bureau][5] (CFPB), however, is in a unique position. As the newest kid on the block, it's one of the few government agencies to have been born in a digital era, and more importantly, without the bureaucratic baggage that all too often stymies innovation. They have a chance to \"do it right\" from the start… and they're doing just that.\n\n**An Agency Born of the Internet Generation**\n\nYesterday, CFPB [announced a bureau-wide preference for open source][6] in its shiny new [Source Code Policy][6], by my [crude research][7], a first for any government agency. There are two watershed shifts here: first, that the agency not only should, but *must* evaluate open source software on equal footing to its proprietary counterparts, a comparison which I believe will [increasingly fall in open source's favor][8], and second, that unless there's an overriding security or similar concern *not to*, public code must be public. There's nothing new here. All it says is that we should use the best software for the job (a no-brainier), and that that software, the public's property, should belong to the public.\n\nSo why is this news? Plenty of government entities have [released][9] [source][10] [code][11], or [encouraged the][12][ use of open][13]-[source software][14]. But no one has come out and [plainly stated that they were an \"open-source agency\"][15], that open source is the new default, and that absent an affirmative step by some nay-sayer, that the public will have access to their code.That's huge. It's flipping the burden, and it's the way things should be from the start.\n\n**But Where's the Beef?**\n\nThat said, there's one thing the source code policy is noticeably silent on: *the ecosystem*. Posting code is great and it's great that they've done the legal legwork so other agencies can follow suit, but that's just the 1.0. The true power of open source comes not from simply publishing code, but from being a member of a broader coding community. Can a CFPB employee contribute a patch to an existing open source project on CFPB time? [^1] What about contributing to a CFPB project once he or she's left? What happens to my rights when I fork a [CFPB project on GitHub][17] and send the agency a pull request? [^2] Can the agency even accept my code legally? [^3] There's a lot of legal ambiguity there, and it's just the kind of legal ambiguity a well-intentioned government attorney can seize upon to gum up the very gears that are driving this incredible move.\n\nWe've seen the same progression in the open data world. The 1.0 is posting 10 XML files at a gigabyte each — an arms-length relationship with developers — arguably open data simply for open data's sake. The secret sauce lies in the relationship, in publishing APIs and web services rather than static data, to build an ecosystem around the agency's work.\n\n**An Innovation Ecosystem**\n\nImagine if government agencies served as the catalyst for a [joint public-private effort to drive tomorrow's innovation][20]. We saw this during the space race, and see it today in terms of government-funded research, but by-and-large, open-source coders have yet to be included. Sure we've seen the \"let's have some open-source developers build this for us for free\" type challenges, but that's about it. There's no ecosystem, no community, no push-pull or give-and-take, and I'm worried that as CFPB's efforts federate across government, this nuance may not federate along with it.\n\nThe agency's already got [it's first public-generated code contribution][21], and can expect at least one more on [their gist of the policy][22] (Ed. note: does CFPB not *own* a Blue Book?!), but the possibility of such a relationship with the citizenry doesn't seem contemplated by the policy, let alone included as integrally as it should.\n\nI'd love to see the next iteration of the policy have a third section, \"III. Membership in the Open-Source Community\" on not just publishing code they've developed in house — don't get me wrong, that's huge — but actually *contributing *meaningful code to the broader ecosystem, and working directly with the open-source community to foster an active partnership that delivers the best citizen services possible. It's a dialog, not a code dump. There needs to be a conversation there.\n\n**Procure, Publish, Participate.**\n\nIt's the realization that when you use open-source software, you're not a customer. You're a member of a community. You're invited to a pot-luck dinner. There's not the same sense of entitlement you have with proprietary software. It's not that they owe you a given feature. There's no financial transaction there. It's that that feature hasn't been developed yet, but can be, the same way every other feature has evolved, through community contributions. There's an entirely different philosophy driving the relationship.\n\nFor open source in government to work, it's got to move beyond procuring community contributed open-source projects on the one hand, and releasing open-source code developed in house distinctly on the other. It's about feeling a sense of belonging. It's about the agency taking on a sense of ownership in the broader project. It's about participation. [^4]\n\nI think CFPB gets it in a big way, and the fact that this is memorialized in writing is a major step in the right direction. They've got the basic mechanics down — procure open–source projects, publish open-source code — but the missing secret sauce that would really drive the policy home? Participate in the open-source community as a matter of policy.\n\n+1 CFPB, +1. *Welcome to the community.*\n\n[^1]: In simple terms, the core of open-source projects (as distinct from community-contributed plugins or modules) are primarily fueled by \"patches\" (small code change sets) in response to bugs or feature requests, that get committed to the project's codebase and released in subsequent versions. [24]\n[^2]: If the project is licensed as government work, are my code contributions now government work? Are the government employee lines of code under a broader license, while mine are under a more restrictive license like GPL or apache? [25]\n[^3]: Is this considered a donation for Federal ethics purposes thus requiring disclosure? [26]\n[^4]: This can manifest itself in lots of different ways, but most tangibly: going to local meetups and conferences (or hosting them); contributing to the project's core by introducing new features, documentation, or posting to support forums; abstracting business logic from the start to be more broadly applicable to other developers; outreach and evangelism; and fostering relationships with key stakeholders within the community [27]\n\n [1]: http://www.treasury.gov/press-center/news/PublishingImages/CFPB.jpg \"CFPB Logo\"\n [2]: http://ben.balter.com/2011/11/29/towards-a-more-agile-government/\n [3]: http://radar.oreilly.com/2011/09/open-source-government-it-goscon.html\n [4]: http://benbalter.github.com/open-source-alternatives/\n [5]: http://cfpb.gov\n [6]: http://www.consumerfinance.gov/developers/sourcecodepolicy/\n [7]: http://www.google.com/search?sugexp=chrome,mod=4&sourceid=chrome&ie=UTF-8&q=source+code+policy+site%3A.gov\n [8]: http://www.amazon.com/The-Wealth-Networks-Production-ebook/dp/B0015GWX0S\n [9]: http://www.fcc.gov/blog/contributing-code-back-fcc-govs-open-source-feedback-loop\n [10]: http://www.whitehouse.gov/blog/2011/02/11/whitehousegov-releases-second-set-open-source-code\n [11]: http://open.nasa.gov\n [12]: https://update.cabinetoffice.gov.uk/resource-library/open-source-procurement-toolkit\n [13]: http://www.finance.gov.au/e-government/infrastructure/docs/AGuidetoOpenSourceSoftware.pdf\n [14]: http://www.tekno.dk/pdf/projekter/p03_opensource_paper_english.pdf\n [15]: https://twitter.com/#!/victorzapanta/status/189390759181557760\n [16]: #note-2020-1 \"In simple terms, the core of open-source projects (as distinct from community-contributed plugins or modules) are primarily fueled by \"patches\" (small code change sets) in response to bugs or feature requests, that get committed to the project's codebase and released in subsequent versions.\"\n [17]: http://github.com/cfpb\n [18]: #note-2020-2 \"If the project is licensed as government work, are my code contributions now government work? Are the government employee lines of code under a broader license, while mine are under a more restrictive license like GPL or apache?\"\n [19]: #note-2020-3 \"Is this considered a donation for Federal ethics purposes thus requiring disclosure?\"\n [20]: http://ben.balter.com/2012/03/05/wordpress-for-government-and-enterprise/#p[NssBlW]\n [21]: https://github.com/cfpb/transit_subsidy/pull/1\n [22]: https://gist.github.com/2343578\n [23]: #note-2020-4 \"This can manifest itself in lots of different ways, but most tangibly: going to local meetups and conferences (or hosting them); contributing to the project's core by introducing new features, documentation, or posting to support forums; abstracting business logic from the start to be more broadly applicable to other developers; outreach and evangelism; and fostering relationships with key stakeholders within the community\"","previous":"<p>PHP (and the open-source software it powers) often gets a bad rap in many government and enterprise circles, the brunt of such anecdotal cries as &#8220;it&#8217;s inherently insecure&#8221; or &#8220;X proprietary product is much safer.&#8221; The truth is, much of this unfortunate stereotype is the result of carefully crafted <a href='http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt'>fear, uncertainty, and doubt (FUD)</a>. An established disinformation tactic historically used by big names in software for decades, one of the most notorious instances of FUD being the leaked Microsoft &#8221;<a href='https://en.wikipedia.org/wiki/Halloween_documents'>Halloween Documents</a>&#8221; that outlined the software firm&#8217;s strategy to paint open-source, for example, as more costly or under-supported.</p><p>So is PHP secure? In a word: <strong>yes</strong>. In my mind, PHP&#8217;s ill-deserved reputation can be traced to three key causes (beyond mere proprietary propaganda):</p><ol>\n<li><strong>It was</strong> - More than a decade ago, there was a legitimate argument to be made for PHP being insecure. It used to be that PHP shipped with a poorly thought out setting toggled on by default (that any coder worth their weight in Mountain Dew would toggle off) called <code>register_globals</code>. The setting allowed poorly written code to be short-circuited by passing certain parameters in the URL.  The default was flipped to off in 2000, and removed completely in 2009. End. Of. Story.</li>\n\n<li><strong>It&#8217;s ubiquitous</strong> - Combine the traffic of Facebook, Wikipedia, and the White House, and you&#8217;ll have a good chunk of the Web&#8217;s traffic, not to mention probably a good chunk of the web&#8217;s attacks as a result. Saying that makes PHP insecure would logically render Microsoft Windows, the target of most viruses, equally insecure and unusable. It&#8217;s just a matter of numbers.</li>\n\n<li><strong>It&#8217;s Forgiving</strong> – PHP is a very forgiving programming language, meaning it has a very gentle learning curve and is the first web language of choice for many budding developers. Naturally, inexperienced coders learning to code are going to write inexperienced and thus insecure code. Does that mean it&#8217;s insecure? No. Bad code is bad code in any language. Again, it&#8217;s a numbers game.</li>\n</ol><p>It&#8217;s next to impossible to say a given language is &#8220;insecure.&#8221; That&#8217;d be like saying English, as a language, is less trustworthy. It just doesn&#8217;t make sense. In fact, most research supports the idea that the opposite is the case, that <a href='https://www.infoworld.com/d/open-source-software/report-open-source-tops-proprietary-code-in-quality-187169'>open-source produces better quality code than its closed-source counterparts</a>. Think about it <a href='http://www.commlawblog.com/2010/01/articles/unlicensed-operations-and-emer/fcc-changes-stance-on-opensource-security/'>this way</a>:</p><blockquote>\n<p>Someone – let&#8217;s call him Bob – wants to secure a room. But in Bob&#8217;s universe, there are no locks. So Bob invents one, and installs it. And realizes he has a huge advantage over would-be intruders. Only Bob knows how the lock works. So no one else knows how to pick it. Bob sets about keeping his lock design a secret.</p>\n\n<p>Alice also needs to secure a room, and she also invents a lock. Unlike Bob, though, Alice publishes her design – not the set-up for a particular key, of course, but the details of the overall mechanism.</p>\n\n<p>Bob thinks Alice is nuts. Why tell people how your lock works? They&#8217;ll just pick it more easily.</p>\n\n<p>Fine, says Alice, good luck keeping your design a secret. It&#8217;s going to get out, no matter what you do. And frankly, Bob, your lock probably isn&#8217;t all that great. Okay, neither is mine. Not yet. But now that it&#8217;s published, people will suggest improvements. Students will do Ph.D. dissertations on making it better. Companies will compete to develop stronger versions. And long after your design has leaked, and instructions for picking it are all over the Internet, my vastly improved lock will be far more secure. Even though everybody will know how it works.</p>\n</blockquote><p>Put another way, unlike many of its commercial counterparts for which obfuscation is a security staple, open source relies on inherently sound security practices to ensure that whatever you want to remain private, remains private.</p><p>Last, because open-source projects like PHP are almost always monitored 24/7 by the prying eyes of countless developers scattered around the globe, if a vulnerability does arise, <a href='https://twitter.com/#!/nacin/status/9753986051604480'>it&#8217;s often addressed in hours</a>, and you&#8217;re not left waiting days or <a href='http://www.xconomy.com/boston/2008/03/07/delays-in-software-patch-pushed-security-firm-to-disclose-vmware-flaw/'>months as in some commercial products</a> for a patch from on high.</p><p>Is there insecure PHP code out there? No doubt. I&#8217;ve seen it. Does that mean all PHP is insecure? Far from it. Next time someone you know says something to the contrary, subtly mention in passing that you&#8217;re really surprised to hear that the company behind their favorite piece of commercial software recently announced they were sunsetting the project, and see how they handle a taste of their own FUD.</p><p>Notes:</p><ol>\n<li>In simplified terms, if I have the variable $logged_in in my page to store whether a user is logged in or not, and I don&#8217;t first set it to false before checking, a visitor could go to mysite.com?logged_in=true, and the page would erroneously think I was logged in.</li>\n</ol>","content":"<p><a href='http://ben.balter.com/wp-content/uploads/2012/03/wordpress-in-government-ben-balter.png'><img alt='WordPress for Government' class='alignleft' src='http://ben.balter.com/wp-content/uploads/2012/03/wordpress-in-government-ben-balter-150x150.png' /></a></p><p>Over the past several years WordPress&#8217;s market share has enjoyed explosive growth across virtually every industry. Today, it powers <a href='http://techcrunch.com/2011/08/19/wordpress-now-powers-22-percent-of-new-active-websites-in-the-us/'>nearly a quarter of new sites</a>, and is the CMS of choice for<a href='http://trends.builtwith.com/cms'>more than two thirds of the top-million sites</a> on the web making it the world&#8217;s most popular publishing platform by a long shot. Yet one group of seemingly ideal users has been slow to take the former blogging platform seriously: .Govs.</p><p>Drupal powers twice as many federal .Govs <a href='http://dotgov.benbalter.com'>as every other CMS combined</a>. That&#8217;s more than six Drupal sites for every one WordPress .Gov alone, not to mention the Joomlas, MovableTypes, and SharePoints of the world. The build-it-yourself software powers the White House, the House of Representatives, half a dozen agencies, and countless data-driven microsites like Recovery.gov and the IT Spending Dashboard, and its public sector use is <a href='http://groups.drupal.org/node/19885'>equally if not more impressive abroad</a>.</p><h3 id='a_problem_of_perception'>A Problem of Perception</h3><div class='well' style='float:right; width: 300px; margin-left: 20px; text-align: left;'>\n<h4>Typical Enterprise Misconceptions</h4>\n\n<ul>\n<li>WordPress is a blogging platform</li>\n\n<li>WordPress doesn&#8217;t scale well</li>\n\n<li>Most plugins are written by hobbyists, not professionals</li>\n\n<li>WordPress is less secure</li>\n\n<li>WordPress can&#8217;t handle complex data types or user roles</li>\n\n<li>There&#8217;s no enterprise support</li>\n\n<li>There aren&#8217;t many WordPress developers</li>\n\n<li>No &#8220;serious&#8221; people use WordPress</li>\n\n<li>The WordPress codebase is immature</li>\n</ul>\n</div><p>WordPress&#8217;s disproportionately low government adoption is arguably the result of a handful of factors. For one, custom post types, the feature that formally graduated WordPress from a mere blogging platform into a full-fledged content management system, has only been around since June of last year. Yet, even among new sites,<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> the ratio remains somewhat stagnant, if not shrinking, leaving one to believe that the technology has lapped its own already stellar perception.</p><p>When you stack the two side by side (or against any other CMS for that matter), WordPress is objectively the prudent choice. On paper, you&#8217;d be hard-pressed to make the case for anything else. But, it&#8217;s not a technical problem. It&#8217;s a human one. It seems that WordPress&#8217;s greatest asset – ease of use that has resulted in widespread adoption by a largely non-technical user base – is threatening to become its greatest liability.</p><p>Among those empowered to make purchasing decisions, there seems to be a sense that WordPress is what you use on the weekends to post pictures of your lunch while Drupal is what you use for &#8220;serious&#8221; business, and with good reason. For better or for worse, Drupal has positioned itself as not just a CMS, but rather <em>the</em> enterprise solution — an inseparable fifth layer of the increasingly ubiquitous enterprise LAMPD stack.</p><table class='table'>\n    <thead>\n        <tr>\n            <th />\n            <th>Drupal</th>\n            <th>WordPress</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>API Hooks</td>\n            <td><a href='http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/8'>267</a></td>\n            <td><a href='http://adambrown.info/p/wp_hooks/version/3.2'>1,506</a>(5x)</td>\n        </tr>\n        <tr>\n            <td>Active Sites</td>\n            <td><a href='http://drupal.org/project/usage'>533,136</a></td>\n            <td><a href='http://en.wordpress.com/stats/'>65,052,049</a>(125x)</td>        \n        </tr>\n        <tr>\n            <td>Plugins / Modules</td>\n            <td><a href='http://drupal.org/project/modules'>8,536</a></td>\n            <td><a href='http://wordpress.org/extend/plugins/'>16,076</a>(2x)</td>        \n        </tr>\n        <tr>\n            <td>Themes</td>\n            <td><a href='http://drupal.org/project/themes'>893</a></td>\n            <td><a href='http://wordpress.org/extend/themes/'>1,426</a>(1.5x)</td>        \n        </tr>\n        <tr>\n            <td>Community<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></td>\n            <td>1.5 Million</td>\n            <td>20 Million (13x)</td>        \n        </tr>\n    </tbody>\n</table><h3 id='beyond_cowboy_coders'><strong>Beyond Cowboy Coders</strong></h3><p>Not surprisingly, the two communities are a reflection of their underlying software&#8217;s position in the broader market. CodePoet.com, for example, a directory of WordPress consultants curated by Automattic, lists <a href='http://codepoet.com/browse/regions/north-america/platforms/wordpress/project-size/250000-250000/'>a mere thirteen firms in North America that seek jobs over $250,000</a>(often a small price tag for government or corporate sites), while its Drupal counterpart lists roughly 80 firms that specifically target <a href='http://drupal.org/marketplace-preview/all/Government'>government</a>, <a href='http://drupal.org/marketplace-preview/all/Corporate'>enterprise</a>, and <a href='http://drupal.org/marketplace-preview/all/Non-Governmental-Organizations'>NGO clients</a> daily.</p><p>I am not suggesting that freelance developers should bring an end to what makes WordPress WordPress and change out of their shorts and sandals this instant or that they become intimately familiar with the nuances of federal procurement law, nor am I suggesting that small shops seek to bite off more than they can realistically chew anytime soon. I am suggestion, however, that there are small, tangible steps that the community can take to make headway into the government and enterprise space and gradually entrench WordPress as a viable alternative to otherwise subpar software harming innocent public servants.</p><h3 id='1_outdated_language'>1. <code>_Deprecate( ‘</code>Outdated Language<code>&#39; )</code></h3><p>The results of the recent WordPress survey suggest that the majority of sites use WordPress <em>as a CMS</em>. That&#8217;s like saying the majority of drivers use their Cadillac <em>as an automobile</em>. WordPress <em>is</em>a CMS. Yet, no one seems to be saying that. WordPress.org calls the software a &#8220;blog tool&#8221;, the WordPress Features codex page <a href='http://codex.wordpress.org/WordPress_Features'>describes the site that the software creates as a &#8220;weblog&#8221; no less than 28 times</a>, <sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> and the first search result for &#8220;WordPress CMS,&#8221; <a href='http://codex.wordpress.org/User:Lastnode/Wordpress_CMS'>describes &#8220;what aspects of the WordPress… need to be changed in order to turn WordPress into a CMS.&#8221;</a></p><p>Especially in the buttoned-up context of corporate and government installs, &#8220;blog&#8221; can be a dirty word. Yet, to get the title of any site, the command we all still run is <code>get_bloginfo()</code>. Inside <code>&amp;lt;?php</code> tags and out, the technology we have created has far outpaced the metaphor we use to describe it.</p><h3 id='2_make_new_friends'>2. Make New Friends</h3><p>In a typical procurement, be it a federal agency, mid-sized corporation, or local municipality, the CMS does not come first. In fact, many stakeholders wouldn&#8217;t know the site&#8217;s underlying technology if it weren&#8217;t for the logo on the login screen. A firm with a strong reputation in the industry is sought, and based largely on their recommendation, the technology – be it proprietary, open-source, or purpose-built – is chosen by evaluating each across a handful of metrics.</p><p>We all know the decision points. Performance and scaling, handing of complex data types, managing user roles, etc. All challenges that WordPress doesn&#8217;t even flinch at, yet the perception among the uninitiated is still widely that between open-source alternatives, WordPress is the least-accomplished in the bunch. Whether its reaching out and inviting nearby firms to your next meetup, giving a WordPress talk at a non-WordPress conference, or just being an exemplar in your local development community, we need to show the tie-wearing few in the conference room that you don&#8217;t have to be boring, overly complex, or unnecessarily expensive to get the job done right.</p><h3 id='3_but_wait_theres_more'>3. But Wait, There&#8217;s More…</h3><p>WordPress consultants are great at selling themselves, but rarely does anyone ever sell WordPress. Ask my why an agency or municipality should adopt Sharepoint, and I have page after page of <a href='http://sharepoint.microsoft.com/en-us/product/benefits/Pages/default.aspx'>focus-group tested material tailored to my industry</a>. Ask my why anyone should use WordPress, and <a href='http://ben.balter.com/2011/09/01/why-wordpress/'>I&#8217;m pretty much left to fend for myself</a>. Somewhat counterintuitive in a world of free software, migrating to WordPress comes with significant costs that firms need to take into account, both real and imagined, costs that the technology&#8217;s ambassadors must actively overcome. Beyond actual development and training costs, there are perceived risks of an immature codebase, insecure plugins, and a general inability to do the job.</p><p>One of WordPress&#8217;s greatest strengths is its tight-nit cadre of dedicated enthusiasts. Yet it can often be hard for those on the inside to see things as those outside do. Think about those who have not yet tasted just how sweet the punch is. The name WordPress most often makes its way into a CIO&#8217;s inbox, for example, only when there&#8217;s been a security breach, not when there&#8217;s been a feature release. Where other platforms have stagnated, WordPress&#8217;s &#8220;can-do&#8221; attitude has forged onward introducing even more one-of-a-kind features, yet all too often they go unnoticed or underappreciated where it matters. Both collectively and individually, for WordPress to gain the respect of &#8220;the man,&#8221; we must seek to broadcast its excellence. Now is not the time for humility.</p><h3 id='4_build_serious_features_for_serious_users'>4. Build Serious Features for Serious Users</h3><p><a href='http://wordpress.org/about/philosophy/'>WordPress&#8217;s core philosophy</a> has always been to &#8220;code for the majority&#8221; and with the amount of customization required out-of-the-box to do just about anything, arguably Drupal&#8217;s philosophy has been &#8220;code for yourself.&#8221; While Automattic does a great job with <a href='http://en.wordpress.com/notable-users/'>the CNN&#8217;s and TechCrunch&#8217;s of the world</a>, there&#8217;s a huge opportunity here for developers to fill a void by giving rise to a new generation of core features, plugins, and themes with &#8220;serious&#8221; implementations in mind. Rather than another social media plugin, what&#8217;s the next big thing? Large-scale data? Geolocation? APIs and interoperability?</p><p>NASA&#8217;s space-race supercharching of the aerospace industry brought consumers everything from Super Soakers to sun glasses, and that same reach for the stars philosophy can put yet-unimagined power in the browsers of everyday WordPress users. Distraction free writing and an <em>even</em> more intuitive administrative interface are killer features to be sure, but they are the icing on an already beautiful cake and do little to gain parity with more traditional CMSs let alone take on the CMS space in the &#8220;WordPress Way.&#8221; A good example of this may be <a href='http://ben.balter.com/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/' title='WP Document Revisions — Document Management &amp; Version Control for WordPress'>WP Document Revisions</a>, a document management and workflow management tool built almost solely using core functionality. By leveraging WordPress&#8217;s core competencies, the venerable CMS can not only gain a seat at the adult&#8217;s table, but exponentially improve the experience for its primary user base as well</p><h3 id='frenemies'>Frenemies</h3><p>It&#8217;s important to note, though, it&#8217;s not a zero-sum game. Drupal doesn&#8217;t compete with WordPress like McDonalds does with Burger King or Coke with Pepsi. Government support for open-source software is a good thing, regardless of what form it takes. True, an infusion of publicly funded effort into the WordPress code base would invariably advance the software just as government funded research advances hard sciences, but, in the end, everybody wins here.</p><p>WordPress and government just make sense. As public institutions both large and small face growing budget concerns and begin to shift many of their services to the web, a platform like WordPress built with engagement, collaboration, and dialogue is the ideal fit, not to mention, incredibly persuasive when compared to expensive, propriety, or purpose-built alternatives.</p><h3 id='we_all_have_a_stake'><strong>We All Have a Stake</strong></h3><p>Whether WordPress is your primary source of income, a hobby, or just the thing that powers your personal site, we all have a stake in WordPress&#8217;s future. It is paramount that the community stays true to its scrappy roots. After all, there&#8217;s no sense selling the couch to buy a new TV. Yet, in order to be taken seriously by the public sector as a platform for more than simply sharing photos of kitten and chronicling teenage angst, we must first take ourselves seriously, and take baby steps to bring government adoption in line with the WordPress community&#8217;s otherwise unparalleled and well-deserved success.</p><div class='footnotes'><hr /><ol><li id='fn:1'>\n<p>Jen Lampton, &#8220;Why WordPress is Better than Drupal, Developers Take Note&#8221; (July, 2010)</p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>\n<p><strong>Update (3/7):</strong> As many have pointed out, a lot of the misinformation may also be traced back to somewhat of a <em>decision lag</em>. Custom post types, custom taxonomies, and WordPress multisite — three key features that although minor from a technical standpoint, really served as the fundamental shift to transition the platform from <em>blog+</em> to <em>full-fledged CMS</em> — came about only three major versions ago (WordPress 3.0). While eighteen months may be an eternity for the vast majority of the technology sector (the iPad 1 had just barely launched eighteen months ago for comparison), in the Government space, <a href='http://ben.balter.com/2011/11/29/towards-a-more-agile-government/'>procurement regulations dictate that such lag times are all but the norm</a>. As a result, in an already risk-averse contracting environment, we may actually be seeing numbers that more accurately reflect say, WordPress 2.9&#8217;s reception in the Government sector — a snapshot of when an agency chose a CMS at the onset of a multi-year procurement — rather than those that accurately reflect its technical capabilities today.</p>\n<a href='#fnref:2' rev='footnote'>&#8617;</a></li><li id='fn:3'>\n<p><strong>Update (3/8):</strong> The features page is part of a community edited Wiki (the WordPress Codex) and since originally posted, I&#8217;ve gone through and reworked much of the blog-specific language. <a href='http://codex.wordpress.org/index.php?title=WordPress_Features&amp;oldid=113531'>View the original</a>.</p>\n<a href='#fnref:3' rev='footnote'>&#8617;</a></li></ol></div>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"},{"url":"/2012/06/02/publishing-government-data-that-developers-will-actually-use/","title":"Publishing Government Data That Developers Will Actually Use\n"},{"url":"/2011/08/31/enterprise-open-source-and-why-better-is-not-enough/","title":"Enterprise, Open Source, and Why Better is not Enough\n"},{"url":"/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/","title":"WP Document Revisions — Document Management & Version Control for WordPress"},{"url":"/2012/10/19/we-ve-been-trained-to-make-paper/","title":"We've been trained to make paper"}]}