{"author":"Benjamin J. Balter","title":"PHP is Insecure (and Other Enterprise Open-Source F.U.D.)\n","excerpt":null,"layout":"post","categories":["Technology"],"tags":["code","enterprise","fud","government","microsoft","open source","php","security","security though obscurity","wordpress"],"post_format":[],"url":"/2012/03/02/php-is-insecure-and-other-enterprise-open-source-fud/","date":"2012-03-02 00:00:00 -0500","id":"/2012/03/02/php-is-insecure-and-other-enterprise-open-source-fud","next":"[![WordPress for Government](http://ben.balter.com/wp-content/uploads/2012/03/wordpress-in-government-ben-balter-150x150.png){.alignleft}][1]\n\nOver the past several years WordPress's market share has enjoyed explosive growth across virtually every industry. Today, it powers [nearly a quarter of new sites][2], and is the CMS of choice for[ more than two thirds of the top-million sites][3] on the web making it the world's most popular publishing platform by a long shot. Yet one group of seemingly ideal users has been slow to take the former blogging platform seriously: .Govs.\n\nDrupal powers twice as many federal .Govs [as every other CMS combined][4]. That's more than six Drupal sites for every one WordPress .Gov alone, not to mention the Joomlas, MovableTypes, and SharePoints of the world. The build-it-yourself software powers the White House, the House of Representatives, half a dozen agencies, and countless data-driven microsites like Recovery.gov and the IT Spending Dashboard, and its public sector use is [equally if not more impressive abroad][5].\n\n### A Problem of Perception\n\n<div style=\"float:right; width: 300px; margin-left: 20px; text-align: left;\" markdown=\"1\" class=\"well\">\n#### Typical Enterprise Misconceptions\n\n*   WordPress is a blogging platform\n*   WordPress doesn't scale well\n*   Most plugins are written by hobbyists, not professionals\n*   WordPress is less secure\n*   WordPress can't handle complex data types or user roles\n*   There's no enterprise support\n*   There aren't many WordPress developers\n*   No \"serious\" people use WordPress\n*   The WordPress codebase is immature\n</div>\n\nWordPress's disproportionately low government adoption is arguably the result of a handful of factors. For one, custom post types, the feature that formally graduated WordPress from a mere blogging platform into a full-fledged content management system, has only been around since June of last year. Yet, even among new sites,[^1] the ratio remains somewhat stagnant, if not shrinking, leaving one to believe that the technology has lapped its own already stellar perception.\n\nWhen you stack the two side by side (or against any other CMS for that matter), WordPress is objectively the prudent choice. On paper, you'd be hard-pressed to make the case for anything else. But, it's not a technical problem. It's a human one. It seems that WordPress's greatest asset – ease of use that has resulted in widespread adoption by a largely non-technical user base – is threatening to become its greatest liability.\n\nAmong those empowered to make purchasing decisions, there seems to be a sense that WordPress is what you use on the weekends to post pictures of your lunch while Drupal is what you use for \"serious\" business, and with good reason. For better or for worse, Drupal has positioned itself as not just a CMS, but rather *the* enterprise solution — an inseparable fifth layer of the increasingly ubiquitous enterprise LAMPD stack.\n\n<table class=\"table\">\n    <thead>\n        <tr>\n            <th></th>\n            <th>Drupal</th>\n            <th>WordPress</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>API Hooks</td>\n            <td markdown=\"1\">[267][7]</td>\n            <td markdown=\"1\">[1,506][8] (5x)</td>\n        </tr>\n        <tr>\n            <td>Active Sites</td>\n            <td markdown=\"1\">[533,136][9]</td>\n            <td markdown=\"1\">[65,052,049][10] (125x)</td>        \n        </tr>\n        <tr>\n            <td>Plugins / Modules</td>\n            <td markdown=\"1\">[8,536][11]</td>\n            <td markdown=\"1\">[16,076][12] (2x)</td>        \n        </tr>\n        <tr>\n            <td>Themes</td>\n            <td markdown=\"1\">[893][13]</td>\n            <td markdown=\"1\">[1,426][14] (1.5x)</td>        \n        </tr>\n        <tr>\n            <td>Community[^2]</td>\n            <td markdown=\"1\">1.5 Million</td>\n            <td markdown=\"1\">20 Million (13x)</td>        \n        </tr>\n    </tbody>\n</table>\n\n### **Beyond Cowboy Coders**\n\nNot surprisingly, the two communities are a reflection of their underlying software's position in the broader market. CodePoet.com, for example, a directory of WordPress consultants curated by Automattic, lists [a mere thirteen firms in North America that seek jobs over $250,000 ][16](often a small price tag for government or corporate sites), while its Drupal counterpart lists roughly 80 firms that specifically target [government][17], [enterprise][18], and [NGO clients][19] daily.\n\nI am not suggesting that freelance developers should bring an end to what makes WordPress WordPress and change out of their shorts and sandals this instant or that they become intimately familiar with the nuances of federal procurement law, nor am I suggesting that small shops seek to bite off more than they can realistically chew anytime soon. I am suggestion, however, that there are small, tangible steps that the community can take to make headway into the government and enterprise space and gradually entrench WordPress as a viable alternative to otherwise subpar software harming innocent public servants.\n\n### 1. `_Deprecate( ‘`Outdated Language`' )`\n\nThe results of the recent WordPress survey suggest that the majority of sites use WordPress *as a CMS*. That's like saying the majority of drivers use their Cadillac *as an automobile*. WordPress *is *a CMS. Yet, no one seems to be saying that. WordPress.org calls the software a \"blog tool\", the WordPress Features codex page [describes the site that the software creates as a \"weblog\" no less than 28 times][20], [^3] and the first search result for \"WordPress CMS,\" [describes \"what aspects of the WordPress… need to be changed in order to turn WordPress into a CMS.\"][22]\n\nEspecially in the buttoned-up context of corporate and government installs, \"blog\" can be a dirty word. Yet, to get the title of any site, the command we all still run is `get_bloginfo()`. Inside `&lt;?php` tags and out, the technology we have created has far outpaced the metaphor we use to describe it.\n\n### 2. Make New Friends\n\nIn a typical procurement, be it a federal agency, mid-sized corporation, or local municipality, the CMS does not come first. In fact, many stakeholders wouldn't know the site's underlying technology if it weren't for the logo on the login screen. A firm with a strong reputation in the industry is sought, and based largely on their recommendation, the technology – be it proprietary, open-source, or purpose-built – is chosen by evaluating each across a handful of metrics.\n\nWe all know the decision points. Performance and scaling, handing of complex data types, managing user roles, etc. All challenges that WordPress doesn't even flinch at, yet the perception among the uninitiated is still widely that between open-source alternatives, WordPress is the least-accomplished in the bunch. Whether its reaching out and inviting nearby firms to your next meetup, giving a WordPress talk at a non-WordPress conference, or just being an exemplar in your local development community, we need to show the tie-wearing few in the conference room that you don't have to be boring, overly complex, or unnecessarily expensive to get the job done right.\n\n### 3. But Wait, There's More…\n\nWordPress consultants are great at selling themselves, but rarely does anyone ever sell WordPress. Ask my why an agency or municipality should adopt Sharepoint, and I have page after page of [focus-group tested material tailored to my industry][23]. Ask my why anyone should use WordPress, and [I'm pretty much left to fend for myself][24]. Somewhat counterintuitive in a world of free software, migrating to WordPress comes with significant costs that firms need to take into account, both real and imagined, costs that the technology's ambassadors must actively overcome. Beyond actual development and training costs, there are perceived risks of an immature codebase, insecure plugins, and a general inability to do the job.\n\nOne of WordPress's greatest strengths is its tight-nit cadre of dedicated enthusiasts.  Yet it can often be hard for those on the inside to see things as those outside do. Think about those who have not yet tasted just how sweet the punch is. The name WordPress most often makes its way into a CIO's inbox, for example, only when there's been a security breach, not when there's been a feature release. Where other platforms have stagnated, WordPress's \"can-do\" attitude has forged onward introducing even more one-of-a-kind features, yet all too often they go unnoticed or underappreciated where it matters. Both collectively and individually, for WordPress to gain the respect of \"the man,\" we must seek to broadcast its excellence. Now is not the time for humility.\n\n### 4. Build Serious Features for Serious Users\n\n[WordPress's core philosophy][25] has always been to \"code for the majority\" and with the amount of customization required out-of-the-box to do just about anything, arguably Drupal's philosophy has been \"code for yourself.\" While Automattic does a great job with [the CNN's and TechCrunch's of the world][26], there's a huge opportunity here for developers to fill a void by giving rise to a new generation of core features, plugins, and themes with \"serious\" implementations in mind. Rather than another social media plugin, what's the next big thing? Large-scale data? Geolocation? APIs and interoperability?\n\nNASA's space-race supercharching of the aerospace industry brought consumers everything from Super Soakers to sun glasses, and that same reach for the stars philosophy can put yet-unimagined power in the browsers of everyday WordPress users. Distraction free writing and an *even* more intuitive administrative interface are killer features to be sure, but they are the icing on an already beautiful cake and do little to gain parity with more traditional CMSs let alone take on the CMS space in the \"WordPress Way.\" A good example of this may be [WP Document Revisions][27], a document management and workflow management tool built almost solely using core functionality. By leveraging WordPress's core competencies, the venerable CMS can not only gain a seat at the adult's table, but exponentially improve the experience for its primary user base as well\n\n### Frenemies\n\nIt's important to note, though, it's not a zero-sum game. Drupal doesn't compete with WordPress like McDonalds does with Burger King or Coke with Pepsi. Government support for open-source software is a good thing, regardless of what form it takes. True, an infusion of publicly funded effort into the WordPress code base would invariably advance the software just as government funded research advances hard sciences, but, in the end, everybody wins here.\n\nWordPress and government just make sense. As public institutions both large and small face growing budget concerns and begin to shift many of their services to the web, a platform like WordPress built with engagement, collaboration, and dialogue is the ideal fit, not to mention, incredibly persuasive when compared to expensive, propriety, or purpose-built alternatives.\n\n### **We All Have a Stake**\n\nWhether WordPress is your primary source of income, a hobby, or just the thing that powers your personal site, we all have a stake in WordPress's future. It is paramount that the community stays true to its scrappy roots. After all, there's no sense selling the couch to buy a new TV. Yet, in order to be taken seriously by the public sector as a platform for more than simply sharing photos of kitten and chronicling teenage angst, we must first take ourselves seriously, and take baby steps to bring government adoption in line with the WordPress community's otherwise unparalleled and well-deserved success.\n\n[^1]: **Update (3/7):** As many have pointed out, a lot of the misinformation may also be traced back to somewhat of a *decision lag*. Custom post types, custom taxonomies, and WordPress multisite — three key features that although minor from a technical standpoint, really served as the fundamental shift to transition the platform from *blog+* to *full-fledged CMS* — came about only three major versions ago (WordPress 3.0). While eighteen months may be an eternity for the vast majority of the technology sector (the iPad 1 had just barely launched eighteen months ago for comparison), in the Government space, [procurement regulations dictate that such lag times are all but the norm][31]. As a result, in an already risk-averse contracting environment, we may actually be seeing numbers that more accurately reflect say, WordPress 2.9's reception in the Government sector — a snapshot of when an agency chose a CMS at the onset of a multi-year procurement — rather than those that accurately reflect its technical capabilities today.\n[^2]: Jen Lampton, \"Why WordPress is Better than Drupal, Developers Take Note\" (July, 2010)\n[^3]: **Update (3/8):** The features page is part of a community edited Wiki (the WordPress Codex) and since originally posted, I've gone through and reworked much of the blog-specific language. [View the original][34].\n\n [1]: http://ben.balter.com/wp-content/uploads/2012/03/wordpress-in-government-ben-balter.png\n [2]: http://techcrunch.com/2011/08/19/wordpress-now-powers-22-percent-of-new-active-websites-in-the-us/\n [3]: http://trends.builtwith.com/cms\n [4]: http://dotgov.benbalter.com\n [5]: http://groups.drupal.org/node/19885\n [6]: #note-2020-1 \"Update (3/7): As many have pointed out, a lot of the misinformation may also be traced back to somewhat of a decision lag. Custom post types, custom taxonomies, and WordPress multisite — three key features that although minor from a technical standpoint, really served as the fundamental shift to transition the platform from blog+ to full-fledged CMS — came about only three major versions ago (WordPress 3.0). While eighteen months may be an eternity for the vast majority of the technology sector (the iPad 1 had just barely launched eighteen months ago for comparison), in the Government space, procurement regulations dictate that such lag times are all but the norm. As a result, in an already risk-averse contracting environment, we may actually be seeing numbers that more accurately reflect say, WordPress 2.9′s reception in the Government sector — a snapshot of when an agency chose a CMS at the onset of a multi-year procurement — rather than those that accurately reflect its technical capabilities today.\"\n [7]: http://api.drupal.org/api/drupal/includes--module.inc/group/hooks/8\n [8]: http://adambrown.info/p/wp_hooks/version/3.2\n [9]: http://drupal.org/project/usage\n [10]: http://en.wordpress.com/stats/\n [11]: http://drupal.org/project/modules\n [12]: http://wordpress.org/extend/plugins/\n [13]: http://drupal.org/project/themes\n [14]: http://wordpress.org/extend/themes/\n [15]: #note-2020-2 \"Jen Lampton, \"Why WordPress is Better than Drupal, Developers Take Note\" (July, 2010)\"\n [16]: http://codepoet.com/browse/regions/north-america/platforms/wordpress/project-size/250000-250000/\n [17]: http://drupal.org/marketplace-preview/all/Government\n [18]: http://drupal.org/marketplace-preview/all/Corporate\n [19]: http://drupal.org/marketplace-preview/all/Non-Governmental-Organizations\n [20]: http://codex.wordpress.org/WordPress_Features\n [21]: #note-2020-3 \"Update (3/8): The features page is part of a community edited Wiki (the WordPress Codex) and since originally posted, I've gone through and reworked much of the blog-specific language. View the original.\"\n [22]: http://codex.wordpress.org/User:Lastnode/Wordpress_CMS\n [23]: http://sharepoint.microsoft.com/en-us/product/benefits/Pages/default.aspx\n [24]: http://ben.balter.com/2011/09/01/why-wordpress/\n [25]: http://wordpress.org/about/philosophy/\n [26]: http://en.wordpress.com/notable-users/\n [27]: http://ben.balter.com/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/ \"WP Document Revisions — Document Management & Version Control for WordPress\"\n [28]: http://ben.balter.com/wp-content/uploads/2012/03/q-cover-issue01-300x387.jpeg\n [29]: http://wpcandy.com/announces/quarterly-issue-one-ships\n [30]: http://wpcandy.com/quarterly\n [31]: http://ben.balter.com/2011/11/29/towards-a-more-agile-government/\n \n \n [34]: http://codex.wordpress.org/index.php?title=WordPress_Features&oldid=113531","previous":"<p>Wired Magazine recently took a turn for the meta. In addition to publishing <a href='http://www.wired.com/wiredenterprise/2012/02/github/all/1'>their recent story featuring the popular version control site GitHub</a> on Wired.com as they would normally, they also <a href='https://github.com/WiredEnterprise/Lord-of-the-Files'>published it on GitHub itself under a creative commons license</a>, allowing readers to fork and contribute to the story as they saw fit. In <a href='http://www.wired.com/wiredenterprise/2012/02/github-revisited/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+wired%2Findex+%28Wired%3A+Index+3+%28Top+Stories+2%29%29'>reflecting after the fact</a>, the Wired team said something that stood out to me:</p><blockquote>\n<p>At Wired offices, you hear the question over and over again as we work on stories like the one you&#8217;re reading now: &#8220;Are you out of the story? I want to go in.&#8221; We have a version control problem. We publish Wired.com on WordPress. It&#8217;s a decent publishing tool, but when two people change a story at the same time, one of them doesn&#8217;t get her changes onto the final story.</p>\n\n<p>We published our GitHub story on GitHub because it was meta-cool. But we also did it to see if GitHub might actually help us solve our problem.</p>\n</blockquote><p>Spoiler alert: it didn&#8217;t. GitHub&#8217;s great for a lot of things, source code chief among them, but it&#8217;s not for the faint of heart. There&#8217;s a great deal of command line, and general geekery involved that raise the barriers to entry just high enough to keep it out of everyday newsrooms and editorial workflows. <sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p><p><strong>The Pitch:</strong>* What if we could re-imagine WordPress&#8217;s ease-of-use and intuitively dumb-simple workflow to introduce a layer of GitHub&#8217;s collaborative fork-and-merge horsepower under the hood? *</p><p>Users would have the ability to &#8220;clone&#8221; an existing post, make any changes they want, and then merge those change back into the original before publishing.There are four distinct use cases where this feature may come into play:</p><ul>\n<li>Collaborative editing (by resolving two users&#8217; conflicted saves – Wired&#8217;s example)</li>\n\n<li>Saving draft changes of already-published content</li>\n\n<li>Scheduling pending changes to already-published content</li>\n\n<li>Allowing users without edit or publish capabilities to edit and submit changes to content (similar to GitHub&#8217;s pull request system)</li>\n</ul><p>I&#8217;d imagine the workflow would go something like this:</p><ol>\n<li>User without the ability to edit an existing post has changes to make</li>\n\n<li>User &#8220;forks&#8221; the post, making any change they deem necessary</li>\n\n<li>When done, user attempts to merge changes back into the original</li>\n\n<li>Post goes into standard WordPress &#8220;pending review&#8221; workflow</li>\n\n<li>Editor is presented with diff (using the built-in diff engine), and can automatically accept changes (if there are no conflicts), or manually merge the two if necessary</li>\n\n<li>Post is re-published with updated content, revision logs merged to reflect history</li>\n</ol><p>In a nutshell:</p><ul>\n<li>\n<p>Extends WordPress&#8217;s existing revision system</p>\n</li>\n\n<li>\n<p>Clone existing posts, edit, and &#8220;republish&#8221;</p>\n</li>\n\n<li>\n<p>Schedule changes to posts, including taxonomies and metadata</p>\n</li>\n\n<li>\n<p>Pending changes diff view, front-end preview of changes</p>\n</li>\n\n<li>\n<p>Using WordPress&#8217;s pending-review system, integrates with existing plugins for notifications, management, etc.</p>\n</li>\n\n<li>\n<p>Ability to store &#8220;commit messages&#8221; with each post revision to explain to others what changes were made and why</p>\n</li>\n\n<li>\n<p>Automatically merges (non-conflicted) changes (based on existing diff engine)</p>\n\n<ol>\n<li>One sided changes – one overwrites the other</li>\n\n<li>Two sided non-conflict changes – automatically merge</li>\n\n<li>Conflicted changes – note conflicts in fork and prepare for re-merge</li>\n</ol>\n</li>\n</ul><p>Post forking may make for a killer plugin <sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> or piece of core functionality… and imagine if it could integrate with other collaboration tools like <a href='http://editflow.org/'>Edit Flow</a>, or <a href='http://ben.balter.com/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/'>WP Document Revisions</a>? As in Wired&#8217;s example, it has the potential to fundamentally change newsrooms and other editorial workflows. All of a sudden, any content becomes either publicly or privately collaborative. Pretty cool, huh? While it may be a bit ahead of it&#8217;s time from a human standpoint, from a technical standpoint, the technology&#8217;s there — it&#8217;s nothing new — just a matter of building it, and hopefully solving the dreaded &#8220;are you out yet?&#8221; problem.</p><p>Thoughts? Would you use this? What else would you like to see it do? <a href='http://ben.balter.com/contact/'>Drop me a line</a>, or let me know in the <a href='#comments'>comments below</a>?</p><p><strong>Update (3/5):</strong>The plan right now is to submit this as a <a href='http://ben.balter.com/tag/gsoc/'>Google Summer of Code</a> project, so if all goes well, look for the above-outlined functionality in a WordPress install near you towards the end of the summer. In the mean time, the continued thoughts/feedback is very greatly appreciated.</p><p><strong>Update (3/27):</strong>It looks like <a href='http://wpdevel.wordpress.com/2012/03/16/no-gsoc-2012/'>WordPress isn&#8217;t participating in GSoC this year</a>. Filing this idea under &#8220;someday&#8221;.</p><p><strong>Update (6/13):</strong>Stay tuned. This may yet become a reality after all. ETA end of summer-ish.</p><p><strong>Update (10/1):</strong>Introducing <a href='http://postforking.wordpress.com/2012/10/01/introducing-post-forking-for-wordpress/'>Post Forking for WordPress</a> — a more collaborative approach to content curation:</p><div class='footnotes'><hr /><ol><li id='fn:1'>\n<p>Having recently given this a try — using GitHub to curate <a href='http://ben.balter.com/2012/02/27/open-source-alternatives-to-proprietary-enterprise-software/'>a collaboratively edited list of open-source alternatives to proprietary software</a> — I know first-hand how off-putting GitHub can be to non-technical users.</p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>\n<p>Full disclosure: two plugins, <a href='http://wordpress.org/extend/plugins/revisionary/'>Revisionary</a> and <a href='http://wordpress.org/extend/plugins/duplicate-post/'>Duplicate Post</a> exist, but they don&#8217;t take the idea nearly as far as the above proposes, nor do they do it in &#8220;the WordPress way&#8221;. I&#8217;d hope that even if the idea started as a plugin, it would eventually be incorporated as core functionality. <span>16</span></p>\n<a href='#fnref:2' rev='footnote'>&#8617;</a></li></ol></div>","content":"<p>PHP (and the open-source software it powers) often gets a bad rap in many government and enterprise circles, the brunt of such anecdotal cries as &#8220;it&#8217;s inherently insecure&#8221; or &#8220;X proprietary product is much safer.&#8221; The truth is, much of this unfortunate stereotype is the result of carefully crafted <a href='http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt'>fear, uncertainty, and doubt (FUD)</a>. An established disinformation tactic historically used by big names in software for decades, one of the most notorious instances of FUD being the leaked Microsoft &#8221;<a href='https://en.wikipedia.org/wiki/Halloween_documents'>Halloween Documents</a>&#8221; that outlined the software firm&#8217;s strategy to paint open-source, for example, as more costly or under-supported.</p><p>So is PHP secure? In a word: <strong>yes</strong>. In my mind, PHP&#8217;s ill-deserved reputation can be traced to three key causes (beyond mere proprietary propaganda):</p><ol>\n<li><strong>It was</strong> - More than a decade ago, there was a legitimate argument to be made for PHP being insecure. It used to be that PHP shipped with a poorly thought out setting toggled on by default (that any coder worth their weight in Mountain Dew would toggle off) called <code>register_globals</code>. The setting allowed poorly written code to be short-circuited by passing certain parameters in the URL.  The default was flipped to off in 2000, and removed completely in 2009. End. Of. Story.</li>\n\n<li><strong>It&#8217;s ubiquitous</strong> - Combine the traffic of Facebook, Wikipedia, and the White House, and you&#8217;ll have a good chunk of the Web&#8217;s traffic, not to mention probably a good chunk of the web&#8217;s attacks as a result. Saying that makes PHP insecure would logically render Microsoft Windows, the target of most viruses, equally insecure and unusable. It&#8217;s just a matter of numbers.</li>\n\n<li><strong>It&#8217;s Forgiving</strong> – PHP is a very forgiving programming language, meaning it has a very gentle learning curve and is the first web language of choice for many budding developers. Naturally, inexperienced coders learning to code are going to write inexperienced and thus insecure code. Does that mean it&#8217;s insecure? No. Bad code is bad code in any language. Again, it&#8217;s a numbers game.</li>\n</ol><p>It&#8217;s next to impossible to say a given language is &#8220;insecure.&#8221; That&#8217;d be like saying English, as a language, is less trustworthy. It just doesn&#8217;t make sense. In fact, most research supports the idea that the opposite is the case, that <a href='https://www.infoworld.com/d/open-source-software/report-open-source-tops-proprietary-code-in-quality-187169'>open-source produces better quality code than its closed-source counterparts</a>. Think about it <a href='http://www.commlawblog.com/2010/01/articles/unlicensed-operations-and-emer/fcc-changes-stance-on-opensource-security/'>this way</a>:</p><blockquote>\n<p>Someone – let&#8217;s call him Bob – wants to secure a room. But in Bob&#8217;s universe, there are no locks. So Bob invents one, and installs it. And realizes he has a huge advantage over would-be intruders. Only Bob knows how the lock works. So no one else knows how to pick it. Bob sets about keeping his lock design a secret.</p>\n\n<p>Alice also needs to secure a room, and she also invents a lock. Unlike Bob, though, Alice publishes her design – not the set-up for a particular key, of course, but the details of the overall mechanism.</p>\n\n<p>Bob thinks Alice is nuts. Why tell people how your lock works? They&#8217;ll just pick it more easily.</p>\n\n<p>Fine, says Alice, good luck keeping your design a secret. It&#8217;s going to get out, no matter what you do. And frankly, Bob, your lock probably isn&#8217;t all that great. Okay, neither is mine. Not yet. But now that it&#8217;s published, people will suggest improvements. Students will do Ph.D. dissertations on making it better. Companies will compete to develop stronger versions. And long after your design has leaked, and instructions for picking it are all over the Internet, my vastly improved lock will be far more secure. Even though everybody will know how it works.</p>\n</blockquote><p>Put another way, unlike many of its commercial counterparts for which obfuscation is a security staple, open source relies on inherently sound security practices to ensure that whatever you want to remain private, remains private.</p><p>Last, because open-source projects like PHP are almost always monitored 24/7 by the prying eyes of countless developers scattered around the globe, if a vulnerability does arise, <a href='https://twitter.com/#!/nacin/status/9753986051604480'>it&#8217;s often addressed in hours</a>, and you&#8217;re not left waiting days or <a href='http://www.xconomy.com/boston/2008/03/07/delays-in-software-patch-pushed-security-firm-to-disclose-vmware-flaw/'>months as in some commercial products</a> for a patch from on high.</p><p>Is there insecure PHP code out there? No doubt. I&#8217;ve seen it. Does that mean all PHP is insecure? Far from it. Next time someone you know says something to the contrary, subtly mention in passing that you&#8217;re really surprised to hear that the company behind their favorite piece of commercial software recently announced they were sunsetting the project, and see how they handle a taste of their own FUD.</p><p>Notes:</p><ol>\n<li>In simplified terms, if I have the variable $logged_in in my page to store whether a user is logged in or not, and I don&#8217;t first set it to false before checking, a visitor could go to mysite.com?logged_in=true, and the page would erroneously think I was logged in.</li>\n</ol>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2012/06/26/why-you-should-always-write-software-as-open-source/","title":"Why You Should Always Write Software as Open Source, Even When It's Never Going to Be"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2011/08/31/enterprise-open-source-and-why-better-is-not-enough/","title":"Enterprise, Open Source, and Why Better is not Enough\n"},{"url":"/2012/10/15/open-source-is-not-a-verb/","title":"Open Source is not a verb"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"}]}