{"author":"Benjamin J. Balter","title":"GitHub for Journalism — What WordPress Post Forking could do to Editorial Workflows\n","excerpt":null,"layout":"post","categories":["Technology"],"tags":["code","collaboration","github","gsoc","journalism","open source","plugin","wordpress","workflow"],"post_format":[],"url":"/2012/02/28/github-for-journalism-what-wordpress-post-forking-could-do-to-editorial-workflows/","date":"2012-02-28 00:00:00 -0500","id":"/2012/02/28/github-for-journalism-what-wordpress-post-forking-could-do-to-editorial-workflows","next":"PHP (and the open-source software it powers) often gets a bad rap in many government and enterprise circles, the brunt of such anecdotal cries as \"it's inherently insecure\" or \"X proprietary product is much safer.\" The truth is, much of this unfortunate stereotype is the result of carefully crafted [fear, uncertainty, and doubt (FUD)][1]. An established disinformation tactic historically used by big names in software for decades, one of the most notorious instances of FUD being the leaked Microsoft \"[Halloween Documents][2]\" that outlined the software firm's strategy to paint open-source, for example, as more costly or under-supported.\n\nSo is PHP secure? In a word: **yes**. In my mind, PHP's ill-deserved reputation can be traced to three key causes (beyond mere proprietary propaganda):\n\n1.  **It was** - More than a decade ago, there was a legitimate argument to be made for PHP being insecure. It used to be that PHP shipped with a poorly thought out setting toggled on by default (that any coder worth their weight in Mountain Dew would toggle off) called `register_globals`. The setting allowed poorly written code to be short-circuited by passing certain parameters in the URL. [^1] The default was flipped to off in 2000, and removed completely in 2009. End. Of. Story.\n2.  **It's ubiquitous** - Combine the traffic of Facebook, Wikipedia, and the White House, and you'll have a good chunk of the Web's traffic, not to mention probably a good chunk of the web's attacks as a result. Saying that makes PHP insecure would logically render Microsoft Windows, the target of most viruses, equally insecure and unusable. It's just a matter of numbers.\n3.  **It's Forgiving** – PHP is a very forgiving programming language, meaning it has a very gentle learning curve and is the first web language of choice for many budding developers. Naturally, inexperienced coders learning to code are going to write inexperienced and thus insecure code. Does that mean it's insecure? No. Bad code is bad code in any language. Again, it's a numbers game.\n\nIt's next to impossible to say a given language is \"insecure.\" That'd be like saying English, as a language, is less trustworthy. It just doesn't make sense. In fact, most research supports the idea that the opposite is the case, that [open-source produces better quality code than its closed-source counterparts][4]. Think about it [this way][5]:\n\n> Someone – let's call him Bob – wants to secure a room. But in Bob's universe, there are no locks. So Bob invents one, and installs it. And realizes he has a huge advantage over would-be intruders. Only Bob knows how the lock works. So no one else knows how to pick it. Bob sets about keeping his lock design a secret.\n> \n> Alice also needs to secure a room, and she also invents a lock.  Unlike Bob, though, Alice publishes her design – not the set-up for a particular key, of course, but the details of the overall mechanism.\n> \n> Bob thinks Alice is nuts. Why tell people how your lock works? They'll just pick it more easily.\n> \n> Fine, says Alice, good luck keeping your design a secret. It's going to get out, no matter what you do. And frankly, Bob, your lock probably isn't all that great. Okay, neither is mine. Not yet. But now that it's published, people will suggest improvements. Students will do Ph.D. dissertations on making it better. Companies will compete to develop stronger versions. And long after your design has leaked, and instructions for picking it are all over the Internet, my vastly improved lock will be far more secure. Even though everybody will know how it works.\n\nPut another way, unlike many of its commercial counterparts for which obfuscation is a security staple, open source relies on inherently sound security practices to ensure that whatever you want to remain private, remains private.\n\nLast, because open-source projects like PHP are almost always monitored 24/7 by the prying eyes of countless developers scattered around the globe, if a vulnerability does arise, [it's often addressed in hours][6], and you're not left waiting days or [months as in some commercial products][7] for a patch from on high.\n\nIs there insecure PHP code out there? No doubt. I've seen it. Does that mean all PHP is insecure? Far from it. Next time someone you know says something to the contrary, subtly mention in passing that you're really surprised to hear that the company behind their favorite piece of commercial software recently announced they were sunsetting the project, and see how they handle a taste of their own FUD.\n\nNotes:\n\n1.  In simplified terms, if I have the variable $logged\\_in in my page to store whether a user is logged in or not, and I don't first set it to false before checking, a visitor could go to mysite.com?logged\\_in=true, and the page would erroneously think I was logged in. \n\n [1]: http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt\n [2]: https://en.wikipedia.org/wiki/Halloween_documents\n [3]: #note-2020-1 \"In simplified terms, if I have the variable $logged_in in my page to store whether a user is logged in or not, and I don't first set it to false before checking, a visitor could go to mysite.com?logged_in=true, and the page would erroneously think I was logged in.\"\n [4]: https://www.infoworld.com/d/open-source-software/report-open-source-tops-proprietary-code-in-quality-187169\n [5]: http://www.commlawblog.com/2010/01/articles/unlicensed-operations-and-emer/fcc-changes-stance-on-opensource-security/\n [6]: https://twitter.com/#!/nacin/status/9753986051604480\n [7]: http://www.xconomy.com/boston/2008/03/07/delays-in-software-patch-pushed-security-firm-to-disclose-vmware-flaw/","previous":"<p><a href='http://ben.balter.com/2011/08/31/enterprise-open-source-and-why-better-is-not-enough/'><img alt='Open Source Alternatives Screenshot' src='http://ben.balter.com/wp-content/uploads/2012/02/open-source-alternatives-screenshot1.png' /></a>I&#8217;ve said in the past, that open-source&#8217;s lack of adoption in the enterprise space is due, at least in part, to the lack of &#8221;<a href='http://ben.balter.com/2011/08/31/enterprise-open-source-and-why-better-is-not-enough/'>focus-group tested ammunition</a>&#8221;. Today, I hope the community can help even the odds with this collaboratively edited list of open-source alternatives to typical government and enterprise software needs</p><p>I was thrilled to come across<a href='https://update.cabinetoffice.gov.uk/sites/default/files/resources/Open-Source-Option-v1.pdf'>this comprehensive list of open-source options for government</a> last week, part of the UK&#8217;s <a href='https://update.cabinetoffice.gov.uk/resource-library/open-source-procurement-toolkit'>Open Source Procurement Toolkit</a>, but was disappointed to see, in addition to it being published in most government agencies favorite web publishing format (PDF), it hadn&#8217;t been updated in more than a year.</p><p>With a little find-and-replace magic, I converted the PDF into a stand-alone web page (based on <a href='http://twitter.github.com/bootstrap/'>Twitter&#8217;s open-source Bootstrap</a> and <a href='https://github.com/mojombo/jekyll'>Jekyll</a>), cleaned up a few typos, and <a href='http://benbalter.github.com/open-source-alternatives/'>published it to GitHub</a> in hopes that it can be collaboratively edited by the broader open-source community.</p><p>Please <a href='http://benbalter.github.com/open-source-alternatives/'>browse the list</a>, and if you find any additions, corrections, or improvements, <a href='https://github.com/benbalter/open-source-alternatives'>fork the page on GitHub</a> and <a href='http://help.github.com/send-pull-requests/'>submit a pull request</a>.</p><p>Live Site: <strong><a href='http://benbalter.github.com/open-source-alternatives/'>Open-Source Alternatives to Proprietary Enterprise Software</a></strong></p>","content":"<p>Wired Magazine recently took a turn for the meta. In addition to publishing <a href='http://www.wired.com/wiredenterprise/2012/02/github/all/1'>their recent story featuring the popular version control site GitHub</a> on Wired.com as they would normally, they also <a href='https://github.com/WiredEnterprise/Lord-of-the-Files'>published it on GitHub itself under a creative commons license</a>, allowing readers to fork and contribute to the story as they saw fit. In <a href='http://www.wired.com/wiredenterprise/2012/02/github-revisited/?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+wired%2Findex+%28Wired%3A+Index+3+%28Top+Stories+2%29%29'>reflecting after the fact</a>, the Wired team said something that stood out to me:</p><blockquote>\n<p>At Wired offices, you hear the question over and over again as we work on stories like the one you&#8217;re reading now: &#8220;Are you out of the story? I want to go in.&#8221; We have a version control problem. We publish Wired.com on WordPress. It&#8217;s a decent publishing tool, but when two people change a story at the same time, one of them doesn&#8217;t get her changes onto the final story.</p>\n\n<p>We published our GitHub story on GitHub because it was meta-cool. But we also did it to see if GitHub might actually help us solve our problem.</p>\n</blockquote><p>Spoiler alert: it didn&#8217;t. GitHub&#8217;s great for a lot of things, source code chief among them, but it&#8217;s not for the faint of heart. There&#8217;s a great deal of command line, and general geekery involved that raise the barriers to entry just high enough to keep it out of everyday newsrooms and editorial workflows. <sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p><p><strong>The Pitch:</strong>* What if we could re-imagine WordPress&#8217;s ease-of-use and intuitively dumb-simple workflow to introduce a layer of GitHub&#8217;s collaborative fork-and-merge horsepower under the hood? *</p><p>Users would have the ability to &#8220;clone&#8221; an existing post, make any changes they want, and then merge those change back into the original before publishing.There are four distinct use cases where this feature may come into play:</p><ul>\n<li>Collaborative editing (by resolving two users&#8217; conflicted saves – Wired&#8217;s example)</li>\n\n<li>Saving draft changes of already-published content</li>\n\n<li>Scheduling pending changes to already-published content</li>\n\n<li>Allowing users without edit or publish capabilities to edit and submit changes to content (similar to GitHub&#8217;s pull request system)</li>\n</ul><p>I&#8217;d imagine the workflow would go something like this:</p><ol>\n<li>User without the ability to edit an existing post has changes to make</li>\n\n<li>User &#8220;forks&#8221; the post, making any change they deem necessary</li>\n\n<li>When done, user attempts to merge changes back into the original</li>\n\n<li>Post goes into standard WordPress &#8220;pending review&#8221; workflow</li>\n\n<li>Editor is presented with diff (using the built-in diff engine), and can automatically accept changes (if there are no conflicts), or manually merge the two if necessary</li>\n\n<li>Post is re-published with updated content, revision logs merged to reflect history</li>\n</ol><p>In a nutshell:</p><ul>\n<li>\n<p>Extends WordPress&#8217;s existing revision system</p>\n</li>\n\n<li>\n<p>Clone existing posts, edit, and &#8220;republish&#8221;</p>\n</li>\n\n<li>\n<p>Schedule changes to posts, including taxonomies and metadata</p>\n</li>\n\n<li>\n<p>Pending changes diff view, front-end preview of changes</p>\n</li>\n\n<li>\n<p>Using WordPress&#8217;s pending-review system, integrates with existing plugins for notifications, management, etc.</p>\n</li>\n\n<li>\n<p>Ability to store &#8220;commit messages&#8221; with each post revision to explain to others what changes were made and why</p>\n</li>\n\n<li>\n<p>Automatically merges (non-conflicted) changes (based on existing diff engine)</p>\n\n<ol>\n<li>One sided changes – one overwrites the other</li>\n\n<li>Two sided non-conflict changes – automatically merge</li>\n\n<li>Conflicted changes – note conflicts in fork and prepare for re-merge</li>\n</ol>\n</li>\n</ul><p>Post forking may make for a killer plugin <sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> or piece of core functionality… and imagine if it could integrate with other collaboration tools like <a href='http://editflow.org/'>Edit Flow</a>, or <a href='http://ben.balter.com/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/'>WP Document Revisions</a>? As in Wired&#8217;s example, it has the potential to fundamentally change newsrooms and other editorial workflows. All of a sudden, any content becomes either publicly or privately collaborative. Pretty cool, huh? While it may be a bit ahead of it&#8217;s time from a human standpoint, from a technical standpoint, the technology&#8217;s there — it&#8217;s nothing new — just a matter of building it, and hopefully solving the dreaded &#8220;are you out yet?&#8221; problem.</p><p>Thoughts? Would you use this? What else would you like to see it do? <a href='http://ben.balter.com/contact/'>Drop me a line</a>, or let me know in the <a href='#comments'>comments below</a>?</p><p><strong>Update (3/5):</strong>The plan right now is to submit this as a <a href='http://ben.balter.com/tag/gsoc/'>Google Summer of Code</a> project, so if all goes well, look for the above-outlined functionality in a WordPress install near you towards the end of the summer. In the mean time, the continued thoughts/feedback is very greatly appreciated.</p><p><strong>Update (3/27):</strong>It looks like <a href='http://wpdevel.wordpress.com/2012/03/16/no-gsoc-2012/'>WordPress isn&#8217;t participating in GSoC this year</a>. Filing this idea under &#8220;someday&#8221;.</p><p><strong>Update (6/13):</strong>Stay tuned. This may yet become a reality after all. ETA end of summer-ish.</p><p><strong>Update (10/1):</strong>Introducing <a href='http://postforking.wordpress.com/2012/10/01/introducing-post-forking-for-wordpress/'>Post Forking for WordPress</a> — a more collaborative approach to content curation:</p><div class='footnotes'><hr /><ol><li id='fn:1'>\n<p>Having recently given this a try — using GitHub to curate <a href='http://ben.balter.com/2012/02/27/open-source-alternatives-to-proprietary-enterprise-software/'>a collaboratively edited list of open-source alternatives to proprietary software</a> — I know first-hand how off-putting GitHub can be to non-technical users.</p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>\n<p>Full disclosure: two plugins, <a href='http://wordpress.org/extend/plugins/revisionary/'>Revisionary</a> and <a href='http://wordpress.org/extend/plugins/duplicate-post/'>Duplicate Post</a> exist, but they don&#8217;t take the idea nearly as far as the above proposes, nor do they do it in &#8220;the WordPress way&#8221;. I&#8217;d hope that even if the idea started as a plugin, it would eventually be incorporated as core functionality. <span>16</span></p>\n<a href='#fnref:2' rev='footnote'>&#8617;</a></li></ol></div>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"},{"url":"/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/","title":"WP Document Revisions — Document Management & Version Control for WordPress"},{"url":"/2012/10/19/we-ve-been-trained-to-make-paper/","title":"We've been trained to make paper"},{"url":"/2011/04/04/when-all-you-have-is-a-pair-of-bolt-cutters/","title":"When all you have is a pair of bolt cutters...\n"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2012/10/01/welcome-to-the-post-cms-world/","title":"Welcome to the Post-CMS World"}]}