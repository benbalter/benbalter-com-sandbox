{"author":"Benjamin J. Balter","title":"The Demise of the Personal Dashboard","excerpt":"When building consumer applications, favor simplicity over complex personalized dashboards which bombard customers with information.\n","layout":"post","categories":["Technology"],"tags":[".govs","analytics","dashboard","enterprise","gov 2.0","government","KPIs","start ups","ui","ui/ux","ux","wordpress"],"post_format":[],"url":"/2012/07/10/the-demise-of-the-dashboard/","date":"2012-07-10 00:00:00 -0400","id":"/2012/07/10/the-demise-of-the-dashboard","next":"A petition was recently posted on [We The People][1] demanding [that federally funded software be released under an open source license][2]. Makes sense. The public should have access to what is technically their property.\n\nHowever, [TechDirt posed the question][3] of whether it should be released under an open-source license or public domain, and I'm afraid they really missed the point.\n\nThere's no doubt in my mind that the creator of the petition was simply asking the question \"I can haz source code?\" Plain and simple. Put it in context: 99% of the time when an organization (or an individual) releases software to the public, they do so under the terms of an open source license. It tells users what they can and can't do, and tells contributors under what terms they can contribute. It's set's the ground rules. It's a contract with the public. It's a prenup for code.\n\nSo what's the issue? Although I generally dread the phrase, in this case, government is objectively different. Under 17 U.S.C § 105 US Government Works are not subject to domestic copyright protection. It's not technically public domain, but it's close enough. [^1] Any US citizen can use the code any way they wish. There's simply no copyright, thus no need to license. [^2] And this entire debate is a moot point if the software is a derivative work of a viral license like the GPL, the most common open source license. [^3]\n\nThat of course, only applies to code created by a US government employee, an increasingly rare occurrence. [^4] Absent permission from the contracting officer, the US government retains unlimited rights for all work created under contract (including the right to redistribute). [^5] And again a moot point if GPL derivative (and thus must be given to the Government under the GPL.)\n\nYet all this is very academic (not to mention dry). Waldo Jaquith and Anil Dash [made a great suggestion][9]: let's be pragmatic here. Government doesn't hold on to software because they are concerned about licensing. They hold on to software because they have better things to do, because it's not within the culture, and because there's no angry mob slamming a battering ram against the metaphorical front gates when they don't.\n\nI don't think the nuances of federal procurement law is even close to the first thing we should care about here. [^6] The concern is about whether feds should do the leg work to open source it or not. The question for us as developers, for the thought leaders in the space, isn't how should the US government best license / not license software, but *how can the open source community help it to do so.* How can we get more software out the door? In a world of finite time, *how can we make open sourcing* [^7] *a bonafide  priority*?\n\nHow? For one, involvement in existing open source projects [^8] would surely send a strong message that there's latent demand here, and would give the foot soldiers political air cover to forge onward with their efforts. For another, taking ownership of the code itself, and realizing it is *our* code, not the government's would surely change the tone of the debate by encouraging agencies to ship code sooner, rather than delaying release out of fear of criticism.\n\nPut simply, it's about what role we are going to play, not what rights we are going to receive. Let's at least get the source code, then we can go back to our regularly scheduled holy wars over licensing.\n\n*As always, [views are my own][13].*\n\n[^1]: I'd argue that all software, even government funded software should still be licensed under a traditional open source license, to resolve any legal ambiguity when used abroad under the terms of various international copyright treaties and agreements\n[^2]: Although citizen-contributions to that project would theoretically not be public domain, thus necessitating a license, which should be clarified in the project's documentation at the time of release to avoid potential issues with 21 U.S.C. § 1342.\n[^3]: Although again, technically speaking the project as a whole would be licensed under GPL,  individual code not dependent on the parent project could be used as a US Government Work.\n[^4]: Unless you're looking at the [vibrant open source cold fusion community][17].\n[^5]: FAR 52.227-14(c)(1)(i). Even if the contracting officer grants such rights, they do not take effect unless the contractor includes a copyright notice at the time of delivery, acknowledging the government's sponsorship and indicating the contract number under which it was procured. See FAR 27.404(a)(5).\n[^6]: General counsels across government already have enough ammunition to stymy progress.\n[^7]: Often the last and least seen step in the enterprise development process.\n[^8]: There's been [exactly one pull request to date][22] across all government github repos.\n\n [1]: https://petitions.whitehouse.gov/\n [2]: https://petitions.whitehouse.gov/petition/maximize-public-benefit-federal-technology-sharing-government-developed-software-under-open-source/6n5ZBBwf?utm_source=wh.gov&utm_medium=shorturl&utm_campaign=shorturl\n [3]: http://www.techdirt.com/articles/20120723/12181319800/should-software-created-federal-govt-be-open-source-licensed-public-domain.shtml\n [9]: https://twitter.com/anildash/statuses/227476701599391744\n [13]: http://ben.balter.com/fine-print/\n [17]: https://github.com/languages/ColdFusion\n [22]: http://ben.balter.com/2012/04/15/cfpb-accepts-first-citizen-submitted-pull-request-on-behalf-of-federal-government/","previous":"<p><a href='http://ben.balter.com/wp-content/uploads/2012/06/mike-holmes.jpeg'><img alt='Unsatisfied with your Contractor?' class='alignright' src='http://ben.balter.com/wp-content/uploads/2012/06/mike-holmes-203x300.jpeg' /></a></p><p>There are two kinds of software: cludgy software and open source. Think about it logically. When you (or your organization) is the only person that&#8217;s ever going to see something, you&#8217;re a lot more likely to &#8220;just make it work.&#8221; After all, who would ever know? <sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p><p>But the same logic that applies to sweeping literal dirt under the rug doesn&#8217;t apply to writing code. Whereas a rug will always serve to cover the floor, applications evolve over time and code is often constantly reused and repurposed as customers&#8217; needs change. Simply put, it&#8217;s impossible to predict today where your code is going to be a year from now and it&#8217;s in your best interest to plan accordingly.</p><p>Open source hedges this risk by distinguishing generic logic (say posting content online) from application-specific customization (say the use-case-specific presentation of that content). Yet when you&#8217;re writing with the intention of producing proprietary or one-off code, you do everything in one pass. The true challenge arises when the same problem emerges again in another department, another business unit, or more generally in an even slightly different context. You&#8217;re reinventing the wheel. You&#8217;re &#8220;open sourcing&#8221; (even if within your organization). The solution? Always assume your software is going to be open source, even if you know it&#8217;s never going to be, and here&#8217;s why:</p><p><strong>Flexible from the start</strong> - Imagine you building a house and the contractor literally nails down all your furniture at the onset, saying you could always remove it before you sell. You&#8217;d almost certainly hire a new contractor. Even if you&#8217;re never going to sell the house, you may want to get a new couch, or at the very least change a room&#8217;s layout somewhere down the line. Yet software developers do it all the time. We custom build solutions, and then go back and abstract logic to &#8220;open source&#8221; it as needed. You&#8217;re doubling the effort. Keep logic separate from implementation-specific customization, and you&#8217;ll have a shared, portable solution from day one. Put another way, your business unit is no way special or unique. The same logic that presents updates about the latest line of widgets to your customers can also be used to update the same customer base about cogs and you should prepare for that potential synergy from day one, even if not immediately realized.</p><p><strong>Modular by design</strong>- Distinguishing unrelated components encourages several coding best practices. In addition to introducing a modular design, meaning additional components could easily be added (or existing components removed) down the line, abstraction often yields objectively more stable and more readably maintainable code due to the abhorrence of the copy-and-paste effect. Put another way, you&#8217;re forced to build elegant solutions — the fact that others are not only going to see, but have to be able to use and adapt your code forces you to follow best-practices like name spacing, abstraction, and object oriented programming.</p><p><strong>A message to your future self</strong> – Ever go back and look at old code, <a href='https://twitter.com/BenBalter/status/209356982983999488'>only to scratch your head</a> as to what&#8217;s going on? The same you that may be asking yourself what you were thinking when you got a tattoo five years back, is also going to be asking why you wrote that singleton function five years ago. Yet when you write open source, you mitigate that risk by explaining your code in such a way that others (including your future self) can understand it. In a world of system orientated architectures and ever-changing requirements, the chance that a software project is one-and-done is increasingly rare, not to mention the fact that by failing to properly document, you&#8217;re introducing a significant risk of vendor lock in. Your successor will thank you, and so will the person paying the bills.</p><p>The reality of today&#8217;s business environment is that all software is inherently &#8220;open source&#8221;, even if the scope of the sharing is limited to an organization. Assume the software is open, needs to be modular, and will be repurposed, and you will save significant costs in the long run. And when you require the same of outside contractors, you get better, more flexible code, and offset the risks of vendor or technology lock in in the long run.</p><p>Justice Brandeis is famous for noting that &#8220;sunlight is the best disinfectant.&#8221; Likewise, the transparency afforded by the open-source ethos produces <a href='http://www.coverity.com/library/pdf/coverity-scan-2011-open-source-integrity-report.pdf'>more reliable software</a> – so why not simply assume your code is going to be open source from the start?</p><div class='footnotes'><hr /><ol><li id='fn:1'>\n<p>The same would apply when you&#8217;re buying software and the contractor is under the impression no one outside the organization will ever see the code, and more importantly, the code could never negatively impact the public&#8217;s perception of their overall work-product <span>5</span></p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li></ol></div>","content":"<p><a href='http://ben.balter.com/wp-content/uploads/2012/07/dashboard-all-the-things.jpeg'><img alt='Dashboard all the things' class='alignright' src='http://ben.balter.com/wp-content/uploads/2012/07/dashboard-all-the-things-300x225.jpeg' /></a></p><p>I was recently asked how I would architect a personalized dashboard experience for visitors to a large, customer-facing website. My response? <em>I wouldn&#8217;t.</em></p><p>A dashboard in a car or airplane makes sense. It&#8217;s not as if I could click &#8220;speedometer&#8221; while driving or press the &#8220;altimeter&#8221; button while flying. I simply need everything at all times. But virtual interfaces don&#8217;t have that same limitation. In fact they don&#8217;t have any limitations. A dashboard can have as much information as the most ambitious engineer can dream — and that&#8217;s exactly the problem.</p><p>Put it in context: Google <a href='http://googleblog.blogspot.com/2012/07/spring-cleaning-in-summer.html'>recently announced the retirement of iGoogle</a>, it&#8217;s own personalized dashboard, and I second their nomination to induct dashboards into the #doingitwrong hall of fame, joining the likes of internet portals, splash pages, and well, basically anything involving ActiveX or Flash.</p><p>Dashboard were a fun user interface experiment. They really were, especially compared to the static pages they evolved from. That was the whole point of Web 2.0, wasn&#8217;t it? Personalization? I mean, it was really cool to drag and drop widgets, and build a virtual command center to monitor my little corner of the internet, and that was fine when there wasn&#8217;t much internet out there to monitor. But the web collectively hit a tipping point a few years back. From push notifications to always-on e-mail, in more ways than we imagine, we now bombard ourselves with more information that we can physically process at any given moment. <a href='http://www.apple.com/iphone/features/retina-display.html'>Quite literally</a>.</p><p>Think about it this way: when customers come to a website, they&#8217;re not looking to solve 10 problems. They&#8217;re looking to solve one. They don&#8217;t want all the potentially relevant information thrown at them all at once; they just want what they need. And they want computers to make that determination for them. But hey, this isn&#8217;t the first time those who predict our user experience needs have erred on the side of <a href='http://www.pocket-lint.com/images/dynamic/NEWS-32125-b3a8b509bc5e3a074f7f240f57d71aa9.jpg'>moar is better</a>.</p><p>So that&#8217;s it? That&#8217;s the end of simultaneous streams? <a href='http://www.informationweek.com/news/software/productivity_apps/240003296'>Far from it</a>. This once-disruptive technology now has a long journey down the Technology S Curve as it becomes the go-to solution for all the business intelligence and project analyst types that stumble across it, in other words, the late adopters.</p><p>Don&#8217;t get me wrong. I&#8217;m sure guilty of building <a href='http://my.fcc.gov/'>a dashboard</a> or <a href='http://codex.wordpress.org/Dashboard_Screen'>two</a> in my day. I&#8217;m not saying that they&#8217;ve never had a place. What I&#8217;m saying is that today, not even the most complex dashboard could give you an accurate snapshot of its genus&#8217;s future. If not dashes, then what? Beyond turning everything into a ubiquitous search box (<em>a la</em> <a href='http://gov.uk'>gov.uk</a>), I&#8217;m far from for a UI/UX expert, but I tend to think that startups generally have a pretty good sense of what&#8217;s next. They have to. If they don&#8217;t get it right the first time around, they tend not to have a second try. So what do we see?</p><ul>\n<li>\n<p><strong>Activity -</strong> Social apps like Facebook, Twitter, Foursquare, even GitHub are all built around the concept of activity. Whether its a news feed, recent checkins, or even commit activity, the question I come with is &#8220;what&#8217;s going on?&#8221; and it gets answered as in depth as I care to scroll through, not as in depth as an engineer arbitrarily decided I needed a few years back. It&#8217;s linear. It&#8217;s <a href='http://en.wikipedia.org/wiki/Inverted_pyramid'>inverted pyramid</a>. It&#8217;s customized by whom or what I follow, not by what I add or (re)arrange.</p>\n</li>\n\n<li>\n<p><strong>Minimal</strong> – Productivity apps like Gmail, Google Reader, even dropbox don&#8217;t summarize for me how many e-mails, unread posts, or free MB I have as soon as I log in, and with the exception of a few labs features here or there, don&#8217;t even give me the option to have anything more than a bare-bones inbox, unread feed, or directory listing. In fact, GMail and Google Reader were recently criticized for <a href='http://jonoscript.wordpress.com/2012/04/26/gmail-designer-arrogance-and-the-cult-of-minimalism/'>going a bit too far</a> in this direction. But the lesson is the same: just give me my stuff and get out of the way.</p>\n</li>\n\n<li>\n<p><strong>Immediate</strong> - Transactional apps, like Uber or Square focus on action, not the past (or even the present). When I open the Uber or square apps, I&#8217;m immediately presented with the ability to request a vehicle or swipe a card, not my top tasks, not an arbitrary array of options or metrics, not with recent news about the product or popular add-ons. The app simply stands at attention, awaiting orders. I actually had to dig a bit to find my transaction history and related business analytics, and I&#8217;d argue that&#8217;s a really good thing.</p>\n</li>\n</ul><p>Think about the last time you&#8217;ve used a drag-and-drop dashboard: If you&#8217;re like me, it&#8217;s going to be either Google Analytics or WordPress, and if that&#8217;s the case, it&#8217;s simply known as <em>the screen you see after you log in, but before you can do what you need to do</em>. It&#8217;s wasted pixels. It&#8217;s cruft from a bygone era when clicks were expensive and developers were left wondering &#8220;how can we fit more on a page&#8221;.</p><p>Options are a crutch. It&#8217;s the natural tendency of any engineer to over engineer a system, and that tendency is even stronger in a risk-averse, top-down culture <a href='http://www.google.com/?q=dashboard+site:.gov'>like government</a>. But your job — as an engineer, as a product manager, as user — is to push back, to fight that urge, to make <a href='http://wordpress.org/about/philosophy/'>decisions, not options</a>. Not convinced? That feature you can&#8217;t <a href='https://github.com/blog/1091-spring-cleaning'>bring yourself to cut</a>? Expose it through your API and see how many users complain.</p><p>It&#8217;s no longer a question of &#8220;is this possible technologically?&#8221;. It&#8217;s no longer a matter of &#8220;can you expose me to that information 24/7?&#8221;. Ever since the advent of <a href='http://html5zombo.com/'>Zombo com</a>, the only limit is our imagination. We&#8217;ve figured out the hard stuff. It&#8217;s not centralization and personalization. It&#8217;s decentralization and interoperability. Simplicity is the new black.</p>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2012/10/01/welcome-to-the-post-cms-world/","title":"Welcome to the Post-CMS World"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2012/06/02/publishing-government-data-that-developers-will-actually-use/","title":"Publishing Government Data That Developers Will Actually Use\n"},{"url":"/2012/10/19/we-ve-been-trained-to-make-paper/","title":"We've been trained to make paper"},{"url":"/2011/01/04/the-files-in-the-computer/","title":"The Files \"in\" the Computer -- Zoolander and the California Supreme Court"}]}