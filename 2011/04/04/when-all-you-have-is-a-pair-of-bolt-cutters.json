{"author":"Benjamin J. Balter","title":"When all you have is a pair of bolt cutters...\n","excerpt":"A workflow management and version control system building on WordPress's existing core competencies. By treating documents as a custom post type, users can leverage the power of WordPress's extensive attachment, revision, taxonomy, and URL rewriting functionalities. ","layout":"post","categories":["Technology"],"tags":["code","document management","google","gsoc","open source","plugin","wordpress"],"post_format":[],"url":"/2011/04/04/when-all-you-have-is-a-pair-of-bolt-cutters/","date":"2011-04-04 00:00:00 -0400","id":"/2011/04/04/when-all-you-have-is-a-pair-of-bolt-cutters","next":"I am gave a brief [lightning talk at April's WordPress DC Meetup][1] on the basics of HTML and PHP (\"coding for dummies\"). The goal: learn how to avoid breaking your website if you edit it. Below are the [slides][2] and [recording][3].\n\n**In invite you to [watch][2], but in short, the Cliff's Notes are:**\n\n*   The process \n    *   The server executes PHP and outputs HTML, CSS, JavaScript, etc.![][4]\n    *   The user's browser takes that output and renders a visual representation of the page\n*   Client-side Languages \n    *   HTML – Static (unchanging) content; provides structure\n    *   CSS – Provides style and form\n    *   JavaScript – Provides interactivity\n*   PHP – Wrapped with \"`php`\" and \"`?>`\" \n    *   Variable - Text, a number, true/false, or a group of variable; identified by \"`$`\"\n    *   `If` Statement – performs an action *if* a statement is true\n    *   `While` Loop – performs an action *while* a statement is true\n    *   `For` / `Foreach` – combines elements of `while` and `if`\n    *   Functions – predefined set of actions; always followed by \"`( )`\"\n    *   Don't forget semicolons\n\n****\n\n**Deck**\n\n\n\n**Recording **(I'm first up)\n\n\n\n**Links to Resources Mentioned**\n\n*   HTML \n    *   [Google: HTML, CSS, & js from the Ground Up ][5]\n    *   [HTML Dog ][6]\n    *   [W3 Learning Wiki ][7]\n    *   [W3 Element Wiki ][8]\n*   Text Editor \n    *   [Notepad++][9] (Windows)\n    *   [TextWrangler][10], [Coda][11] (Mac)\n*   FTP Client (to connect to server) \n    *   [WinSCP][12], [Notepad++][9] (Windows)\n    *   [CyberDuck][13], [Coda][11] (Mac)\n*   WordPress \n    *   [Define( WP_DEBUG, true);][14] in wp-config.php\n    *   [Debug bar][15] plugin\n    *   [WordPress Codex][16]\n\n*Thanks to all who came out or tuned into the live stream. Comments? Questions? I'd love to hear your thoughts [below][17] or feel free to [contact me][18].*\n\n [1]: http://www.meetup.com/wordpressdc/events/16887732/\n [2]: #deck\n [3]: #recording\n [4]: http://ben.balter.com/wp-content/uploads/2011/04/infographic-300x138.png \"infographic\"\n [5]: http://code.google.com/edu/submissions/html-css-javascript/\n [6]: http://htmldog.com\n [7]: http://www.w3.org/wiki/HTML/Training\n [8]: http://www.w3.org/wiki/HTML/Elements\n [9]: http://notepad-plus-plus.org/\n [10]: http://www.barebones.com/products/textwrangler/\n [11]: http://www.panic.com/coda/\n [12]: http://winscp.net/eng/index.php\n [13]: http://cyberduck.ch/\n [14]: http://codex.wordpress.org/Editing_wp-config.php#Debug\n [15]: http://wordpress.org/extend/plugins/debug-bar/\n [16]: http://codex.wordpress.org/\n [17]: #comments\n [18]: http://ben.balter.com/contact/","previous":"<p>I needed a quick-and-easy way to parse Microsoft Word&#8217;s footnote format into a more web-friendly format for a recent project. After a bit of regular expression hacking, I was able to build a WordPress plugin to automatically convert content pasted from Word into a format readable by <span>Andrew Nacin&#8217;s</span> popular <span>Simple Footnotes</span> plugin.</p><p>The process is surprisingly simple given <span>WordPress&#8217;s extensive filter API</span>. First, to grab the footnotes from Word&#8217;s <code>ftnref</code> format:</p><div>\n<div class='highlight'><pre><code class='php'><span class='cp'>&lt;?php</span> <span class='c1'>//grab all the Word-style footnotes into an array</span>\n<span class='nv'>$pattern</span> <span class='o'>=</span> <span class='s1'>&#39;#&lt;a href\\=&quot;\\#_ftnref([0-9]+)&quot;&gt;\\[([0-9]+)\\]&lt;/a&gt; (.*)#&#39;</span><span class='p'>;</span>\n<span class='nb'>preg_match_all</span><span class='p'>(</span> <span class='nv'>$pattern</span><span class='p'>,</span> <span class='nv'>$content</span><span class='p'>,</span> <span class='nv'>$footnotes</span><span class='p'>,</span> <span class='nx'>PREG_SET_ORDER</span><span class='p'>);</span><span class='cp'>?&gt;</span><span class='x' />\n</code></pre>\n</div>\n\n</div>\n<p>This creates an array (<code>$footnotes</code>) with the both the footnote number and the text of the footnote. We then need a way to replace the in-text reference with the parsed footnotes so that Simple Footnotes can understand them. I did this by creating two arrays, a find array and a replace array with each Word-style footnote reference and its Simple Footnote formatted counterpart:</p>\n<div>\n<div class='highlight'><pre><code class='php'><span class='cp'>&lt;?php</span> <span class='c1'>//build find and replace arrays</span>\n<span class='k'>foreach</span> <span class='p'>(</span><span class='nv'>$footnotes</span> <span class='k'>as</span> <span class='nv'>$footnote</span><span class='p'>)</span> <span class='p'>{</span>\n  <span class='nv'>$find</span><span class='p'>[]</span> <span class='o'>=</span> <span class='s1'>&#39;#&lt;a href\\=&quot;\\#_ftn&#39;</span><span class='o'>.</span><span class='nv'>$footnote</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span><span class='o'>.</span><span class='s1'>&#39;&quot;&gt;\\[&#39;</span><span class='o'>.</span><span class='nv'>$footnote</span><span class='p'>[</span><span class='mi'>1</span><span class='p'>]</span><span class='o'>.</span><span class='s1'>&#39;\\]&lt;/a&gt;#&#39;</span><span class='p'>;</span>\n  <span class='nv'>$replace</span><span class='p'>[]</span> <span class='o'>=</span> <span class='s1'>&#39;[ref]&#39;</span> <span class='o'>.</span> <span class='nb'>str_replace</span><span class='p'>(</span> <span class='k'>array</span><span class='p'>(</span><span class='s2'>&quot;</span><span class='se'>\\r\\n</span><span class='s2'>&quot;</span><span class='p'>,</span> <span class='s2'>&quot;</span><span class='se'>\\r</span><span class='s2'>&quot;</span><span class='p'>,</span> <span class='s2'>&quot;</span><span class='se'>\\n</span><span class='s2'>&quot;</span><span class='p'>),</span> <span class='s2'>&quot;&quot;</span><span class='p'>,</span>   <span class='nv'>$footnote</span><span class='p'>[</span><span class='mi'>3</span><span class='p'>])</span> <span class='o'>.</span> <span class='s1'>&#39;[/ref]&#39;</span><span class='p'>;</span>\n<span class='p'>}</span><span class='cp'>?&gt;</span><span class='x' />\n</code></pre>\n</div>\n\n</div>\n<p>Finally, so that the entire replacement can be done in a single pass, push a final find/replace pair into the end of the array, to remove the original footnotes:</p>\n<div>\n<div class='highlight'><pre><code class='php'><span class='cp'>&lt;?php</span> <span class='c1'>//remove all the original footnotes when done</span>\n    <span class='nv'>$find</span><span class='p'>[]</span> <span class='o'>=</span> <span class='s1'>&#39;#&lt;div&gt;\\s*&lt;a href\\=&quot;\\#_ftnref([0-9]+)&quot;&gt;\\[([0-9]+)\\]&lt;/a&gt; (.*)\\s*&lt;/div&gt;\\s+#&#39;</span><span class='p'>;</span>\n    <span class='nv'>$replace</span><span class='p'>[]</span> <span class='o'>=</span> <span class='s1'>&#39;&#39;</span><span class='p'>;</span><span class='cp'>?&gt;</span><span class='x' />\n</code></pre>\n</div>\n\n</div>\n<p>Because PHP&#8217;s <code>preg_replace</code> function can handle arrays, all we have to do is run a single function:</p>\n<div>\n<div class='highlight'><pre><code class='php'><span class='cp'>&lt;?php</span> <span class='nv'>$content</span> <span class='o'>=</span> <span class='nb'>preg_replace</span><span class='p'>(</span> <span class='nv'>$find</span><span class='p'>,</span> <span class='nv'>$replace</span><span class='p'>,</span> <span class='nv'>$content</span> <span class='p'>);</span><span class='cp'>?&gt;</span><span class='x' />\n</code></pre>\n</div>\n\n</div>\n<p>Putting it all together, including a filter hook to call our function and a <code>meta_value</code> flag to prevent parsing on subsequent saves, the result is:</p>\n<script src='http://gist-it.appspot.com/github/benbalter/Convert-Microsoft-Word-Footnotes-to-WordPress-Simple-Footnotes/raw/master/parse-footnotes.php'>     </script>\n<p>To use, you can <a href='https://github.com/benbalter/Convert-Microsoft-Word-Footnotes-to-WordPress-Simple-Footnotes'>download the plugin file</a><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> and activate (be sure you already have <a href='http://andrewnacin.com/2010/07/24/simple-footnotes-0-3/'>Simple Footnotes</a> installed). Copy the content from Word, and Paste into the &#8221;<em>Paste from Word</em>&#8221; box (may need to toggle the &#8221;<a href='http://www.bloggingteacher.com/writing-posts-with-the-wordpress-visual-editor-the-kitchen-sink'><em>Kitchen Sink</em></a>&#8221;.<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup></p>\n\n<p>Thoughts? Improvements? The above code solved a rather stubborn workflow problem in a project I was working on, and hopefully it can do the same for you. Feel free to use/improve the above code.</p>\n<div class='footnotes'><hr /><ol><li id='fn:1'>\n<p>Licensed under <a href='http://wordpress.org/about/gpl/'>GPLv2</a></p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>\n<p>You can even <a href='http://ben.balter.com/2011/03/20/regular-expression-to-parse-word-style-footnotes/'>Fork the plugin over on Github</a></p>\n<a href='#fnref:2' rev='footnote'>&#8617;</a></li></ol></div>","content":"<p><a href='http://xkcd.com/801/'><img alt='Golden Hammer' class='aligncenter' src='http://imgs.xkcd.com/comics/golden_hammer.png' /></a></p><p>My biggest gripe with <a href='http://wordpress.org'>WordPress</a>, the open-source <a href='http://en.wikipedia.org/wiki/Content_management_system'>content management system</a> that silently works behind the scenes to power <a href='http://w3techs.com/technologies/overview/content_management/all'>more than 13%</a> of the Internet, is that it sets far too high a bar with which other applications must compete. I cannot count the number of times that I have used a proprietary or commercial system and silently thought to myself, &#8221;<em>WordPress can do this so much better</em>.&#8221; <sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p><p>This ritual saw no deviation, when I sat down to setup <a href='http://en.wikipedia.org/wiki/Microsoft_SharePoint'>SharePoint</a> in support of my <a href='http://pcjl.org'>law journal</a>‘s upcoming publication workflow. Like Alice stumbling down the rabbit hole, it quickly became apparent that in the counterintuitive world of Sharepoint, each step was going to be more and more alien than the last. And then it dawned on me: a corollary of <a href='http://www.youtube.com/watch?v=8DfztIIqbTI#t=1m3s'>Uncle Ben&#8217;s law</a>, <em>with great power does not have to come great complexity</em>.</p><p>WordPress does many things right. It is an incredibly versatile tool, but like a body builder with a heart of gold, it is as friendly and approachable as it is powerful. WordPress has <a href='http://core.trac.wordpress.org/browser/trunk?rev=3'>more than eight years of rock-solid experience</a> storing, organizing, sorting, and searching all sorts of user-generated content. Its got a set of slick attachment functions to allow users to safely and securely upload and store their non-WordPress files in WordPress. For the past three years, it even has a proto-version control system in the form of its much-envied <a href='http://codex.wordpress.org/Revision_Management'>post revisions</a>. <sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> And it does all this through an interface so dumb-simple that <a href='http://www.thegrandparentsblog.com/'>even your grandparents could start their own site</a>. It seems like a no brainer then, to marry these tools to create a WordPress-based document management system.</p><p>Imagine a workflow management and version control system <a href='http://lists.automattic.com/pipermail/wp-hackers/2011-March/038727.html'>building on WordPress&#8217;s existing core competencies</a>. By treating documents as a custom post type, users can leverage the power of WordPress&#8217;s extensive attachment, revision, taxonomy, and URL rewriting functionalities. Document permalinks can be routed through the traditional rewrite structure such that the latest revision of a file always remains at a static, authenticated URL, and users can toggle the visibility of documents (both internally and externally) as they currently do with post statuses and permissions. Similarly, file locking can extend WordPress&#8217;s autosave functionality (as a ping), revision logs can extend WordPress&#8217;s existing revision relationship and can be outputted as a traditional RSS feed, etc.</p><p><img alt='' src='http://ben.balter.com/wp-content/uploads/2011/04/wireframe.png' /></p><p>As seen in the above wireframe, document revisions would be inextricably linked to the essential WordPress experience. If you know WordPress, you know document revisions. Why reinvent the wheel when you have the best wheel the world has ever seen, and a passionate global community dedicated to improving it? This approach would not simply be limited to traditional documents. Images, PDFs, code — anything the user wants to collaborate with others on, or have a secure revision history can be thrown at it. Academics, lawyers, government folks, the possibilities are endless.</p><p>To be fair, WordPress has been arguably overextended in some cases, <sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> but I do not believe that to be the case here. Sure any WordPress enthusiast may be guilty of the <a href='http://xkcd.com/801'>bolt-cutter mentality</a> every now and then, but I believe, if anything, it is enterprise stakeholders&#8217; tendency to gravitate toward bloated, commercial systems that is more akin to Wolf Blitzer&#8217;s boat house, and a big reason why is because with the exception of an unnamed <sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> content management system&#8217;s poorly executed attempt at document management, no open-source alternatives exist.</p><p>I am working on submitting this idea as a proposed <a href='http://www.google-melange.com/gsoc/homepage/google/gsoc2011'>Google Summer of Code</a> project, <sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup> with the goal of giving WordPress parity with commercial and proprietary applications and hopefully injecting some open-source goodness into government and other enterprise environments, but before I do, I would love to hear your thoughts. <a href='http://ben.balter.com/contact/'>Get in touch</a>, or <a href='#comments'>leave a comment below</a>.</p><p><strong>Update (8/29)</strong>: The final result of the project is an <a href='http://ben.balter.com/2011/08/29/document-management-version-control-for-wordpress/'>Open Source Document Management and Version Control System</a> for WordPress. An overview of its top-level features including a screencast of a typical use case is available on the <a href='http://ben.balter.com/2011/08/29/document-management-version-control-for-wordpress/'>WP Document Revisions</a> page.</p><div class='footnotes'><hr /><ol><li id='fn:1'>\n<p><em>See, e.g.,</em><a href='http://www.emc.com/domains/documentum/index.htm'>Documentum</a>, <a href='http://www.liferay.com/'>Liferay</a>, <a href='http://code.google.com/p/soc/wiki/MelangeIntro'>Melange</a>, and <a href='http://www.mediaite.com/online/worse-than-previously-thought-gawker-content-management-system-hacked/'>Gawker&#8217;s CMS</a>.</p>\n<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>\n<p>Nearly three years ago, at the time of the feature&#8217;s inception, <a href='http://wordpress.org/news/2008/07/wordpress-26-tyner/'>WordPress founder Matt Mullenweg noted</a>, &#8221;<em>With the power of modern computers, it&#8217;s silly that we still use save and editing metaphors from the time when the most common method of storage was floppy disks… now we&#8217;re taking that to another level by allowing you to view who made what changes when… through a super-easy interface, much like Wikipedia or a version control system.</em>&#8221;</p>\n<a href='#fnref:2' rev='footnote'>&#8617;</a></li><li id='fn:3'>\n<p><em>See, e.g.,</em>WordPress as an <a href='http://net.tutsplus.com/tutorials/wordpress/build-a-wordburner-email-newsletter-manager-using-wordpress-and-feedburner/'>e-mail newsletter</a>, <a href='http://publisherblog.automattic.com/2008/02/13/wp-contact-manager/'>contact manager</a>, <a href='http://slipfire.com/wp-crm/'>CRM</a>, <a href='http://wordpress.org/extend/plugins/wp-task-manager/'>task list</a>, <a href='http://wordpress.org/extend/plugins/wp-invoice/'>invoice system</a>, <a href='http://wordpress.org/extend/plugins/job-manager/'>job bank</a>, or <a href='http://wordpress.org/extend/plugins/great-real-estate/'>real estate directory</a>.</p>\n<a href='#fnref:3' rev='footnote'>&#8617;</a></li><li id='fn:4'>\n<p>Let&#8217;s just call it &#8220;Frupal&#8221; for the sake of discussion.</p>\n<a href='#fnref:4' rev='footnote'>&#8617;</a></li><li id='fn:5'>\n<p>In hindsight, I probably shouldn&#8217;t have ripped on Melange. <em>See supra note 1.</em></p>\n<a href='#fnref:5' rev='footnote'>&#8617;</a></li></ol></div>","related_posts":[{"url":"/2011/11/29/towards-a-more-agile-government/","title":"Towards a More Agile Government"},{"url":"/2011/09/01/why-wordpress/","title":"Why WordPress"},{"url":"/2012/03/05/wordpress-for-government-and-enterprise/","title":"WordPress for Government - A Problem of Perception"},{"url":"/2011/08/29/wp-document-revisions-document-management-version-control-wordpress/","title":"WP Document Revisions — Document Management & Version Control for WordPress"},{"url":"/2012/02/28/github-for-journalism-what-wordpress-post-forking-could-do-to-editorial-workflows/","title":"GitHub for Journalism — What WordPress Post Forking could do to Editorial Workflows\n"},{"url":"/2012/12/15/why-wordpress-next-version-should-just-give-it-a-rest-already/","title":"Why WordPress's next version should just give it a REST already"},{"url":"/2010/11/15/will-federal-contracting-officers-soon-have-their-heads-in-the-clouds/","title":"Will Federal Contracting Officers Soon Have Their Heads in the Clouds?\n"},{"url":"/2011/11/01/federal-agility-a-cultural-solution-to-a-technical-problem/","title":"Federal Agility: a Cultural Solution to a Technical Problem"},{"url":"/2012/04/10/whats-missing-from-cfpbs-awesome-new-source-code-policy/","title":"What's Missing from CFPB's Awesome New Source Code Policy"},{"url":"/2012/10/01/welcome-to-the-post-cms-world/","title":"Welcome to the Post-CMS World"}]}